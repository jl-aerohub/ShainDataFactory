{
	"name": "Characteristic_Item_DataFlow_copy1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "AerohubStorageAccount",
						"type": "LinkedServiceReference"
					},
					"name": "MeasurementQIFIn"
				},
				{
					"dataset": {
						"referenceName": "QIFDocumentTable",
						"type": "DatasetReference"
					},
					"name": "QIFDocumentSource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Characteristic_Item_Sink",
						"type": "DatasetReference"
					},
					"name": "CharacteristicItemSink"
				}
			],
			"transformations": [
				{
					"name": "AngleBetweenFlatten"
				},
				{
					"name": "CharacteristicItemSelect"
				},
				{
					"name": "AngleFlatten"
				},
				{
					"name": "AngularCoordinateFlatten"
				},
				{
					"name": "AngularCoordinateType"
				},
				{
					"name": "AngleType"
				},
				{
					"name": "AngleBetweenType"
				},
				{
					"name": "AngleFromFlatten"
				},
				{
					"name": "AngleFromType"
				},
				{
					"name": "AngularityFlatten"
				},
				{
					"name": "AngularityType"
				},
				{
					"name": "ChordFlatten"
				},
				{
					"name": "ChordType"
				},
				{
					"name": "CircularityFlatten"
				},
				{
					"name": "CircularityType"
				},
				{
					"name": "CircularRunoutFlatten"
				},
				{
					"name": "CircularRunoutType"
				},
				{
					"name": "CoaxialityFlatten"
				},
				{
					"name": "CoaxialityType"
				},
				{
					"name": "ConcentricityFlatten"
				},
				{
					"name": "ConcentricityType"
				},
				{
					"name": "ConicalTaperFlatten"
				},
				{
					"name": "ConicalTaperType"
				},
				{
					"name": "ConicityFlatten"
				},
				{
					"name": "ConicityType"
				},
				{
					"name": "CurveLengthFlatten"
				},
				{
					"name": "CurveLengthType"
				},
				{
					"name": "CylindricityFlatten"
				},
				{
					"name": "CylindricityType"
				},
				{
					"name": "DepthFlatten"
				},
				{
					"name": "DepthType"
				},
				{
					"name": "DiameterFlatten"
				},
				{
					"name": "DiameterType"
				},
				{
					"name": "DistanceBetweenFlatten"
				},
				{
					"name": "DistanceBetweenType"
				},
				{
					"name": "DistanceFromFlatten"
				},
				{
					"name": "DistanceFromType"
				},
				{
					"name": "EllipticityFlatten"
				},
				{
					"name": "EllipticityType"
				},
				{
					"name": "FlatTaperFlatten"
				},
				{
					"name": "FlatTaperType"
				},
				{
					"name": "FlatnessFlatten"
				},
				{
					"name": "FlatnessType"
				},
				{
					"name": "HeightFlatten"
				},
				{
					"name": "HeightType"
				},
				{
					"name": "LengthFlatten"
				},
				{
					"name": "LengthType"
				},
				{
					"name": "LinearCoordinateFlatten"
				},
				{
					"name": "LinearCoordinateType"
				},
				{
					"name": "LineProfileFlatten"
				},
				{
					"name": "LineProfileType"
				},
				{
					"name": "OtherFormFlatten"
				},
				{
					"name": "OtherFormType"
				},
				{
					"name": "ParallelismFlatten"
				},
				{
					"name": "ParallelismType"
				},
				{
					"name": "PerpendicularityFlatten"
				},
				{
					"name": "PerpendicularityType"
				},
				{
					"name": "PointProfileFlatten"
				},
				{
					"name": "PointProfileType"
				},
				{
					"name": "PositionFlatten"
				},
				{
					"name": "PositionType"
				},
				{
					"name": "RadiusFlatten"
				},
				{
					"name": "RadiusType"
				},
				{
					"name": "SphericalDiameterFlatten"
				},
				{
					"name": "SphericalDiameterType"
				},
				{
					"name": "SphericalRadiusFlatten"
				},
				{
					"name": "SphericalRadiusType"
				},
				{
					"name": "SphericityFlatten"
				},
				{
					"name": "SphericityType"
				},
				{
					"name": "SquareFlatten"
				},
				{
					"name": "SquareType"
				},
				{
					"name": "StraightnessFlatten"
				},
				{
					"name": "StraightnessType"
				},
				{
					"name": "SurfaceProfileFlatten"
				},
				{
					"name": "SurfaceProfileType"
				},
				{
					"name": "SurfaceProfileNonUniformFlatten"
				},
				{
					"name": "SurfaceProfileNonUniformType"
				},
				{
					"name": "SurfaceTextureFlatten"
				},
				{
					"name": "SurfaceTextureType"
				},
				{
					"name": "SymmetryFlatten"
				},
				{
					"name": "SymmetryType"
				},
				{
					"name": "ThicknessFlatten"
				},
				{
					"name": "ThicknessType"
				},
				{
					"name": "ThreadFlatten"
				},
				{
					"name": "ThreadType"
				},
				{
					"name": "ToroidicityFlatten"
				},
				{
					"name": "ToroidicityType"
				},
				{
					"name": "TotalRunoutFlatten"
				},
				{
					"name": "TotalRunoutType"
				},
				{
					"name": "UserDefinedAttributeFlatten"
				},
				{
					"name": "UserDefinedAttributeType"
				},
				{
					"name": "UserDefinedLinearFlatten"
				},
				{
					"name": "UserDefinedLinearType"
				},
				{
					"name": "UserDefinedAngularFlatten"
				},
				{
					"name": "UserDefinedAngularType"
				},
				{
					"name": "UserDefinedTemperatureFlatten"
				},
				{
					"name": "UserDefinedTemperatureType"
				},
				{
					"name": "UserDefinedAreaFlatten"
				},
				{
					"name": "UserDefinedAreaType"
				},
				{
					"name": "UserDefinedForceFlatten"
				},
				{
					"name": "UserDefinedForceType"
				},
				{
					"name": "UserDefinedMassFlatten"
				},
				{
					"name": "UserDefinedMassType"
				},
				{
					"name": "UserDefinedPressureFlatten"
				},
				{
					"name": "UserDefinedPressureType"
				},
				{
					"name": "UserDefinedSpeedFlatten"
				},
				{
					"name": "UserDefinedSpeedType"
				},
				{
					"name": "UserDefinedTimeFlatten"
				},
				{
					"name": "UserDefinedTimeType"
				},
				{
					"name": "UserDefinedUnitFlatten"
				},
				{
					"name": "UserDefinedUnitType"
				},
				{
					"name": "WeldFilletFlatten"
				},
				{
					"name": "WeldFilletType"
				},
				{
					"name": "WeldPlugFlatten"
				},
				{
					"name": "WeldPlugType"
				},
				{
					"name": "WeldSlotFlatten"
				},
				{
					"name": "WeldSlotType"
				},
				{
					"name": "WeldSpotFlatten"
				},
				{
					"name": "WeldSpotType"
				},
				{
					"name": "WeldStudFlatten"
				},
				{
					"name": "WeldStudType"
				},
				{
					"name": "WeldSeamFlatten"
				},
				{
					"name": "WeldSeamType"
				},
				{
					"name": "WeldSurfacingFlatten"
				},
				{
					"name": "WeldSurfacingType"
				},
				{
					"name": "WeldEdgeFlatten"
				},
				{
					"name": "WeldEdgeType"
				},
				{
					"name": "WeldSquareFlatten"
				},
				{
					"name": "WeldSquareType"
				},
				{
					"name": "WeldBevelFlatten"
				},
				{
					"name": "WeldBevelType"
				},
				{
					"name": "WeldVFlatten"
				},
				{
					"name": "WeldVType"
				},
				{
					"name": "WeldUFlatten"
				},
				{
					"name": "WeldUType"
				},
				{
					"name": "WeldJFlatten"
				},
				{
					"name": "WeldJType"
				},
				{
					"name": "WeldFlareVFlatten"
				},
				{
					"name": "WeldFlareVType"
				},
				{
					"name": "WeldFlareBevelFlatten"
				},
				{
					"name": "WeldFlareBevelType"
				},
				{
					"name": "WeldScarfFlatten"
				},
				{
					"name": "WeldScarfType"
				},
				{
					"name": "WeldCompoundFlatten"
				},
				{
					"name": "WeldCompoundType"
				},
				{
					"name": "WidthFlatten"
				},
				{
					"name": "WidthType"
				},
				{
					"name": "CharacteristicItemUnion"
				},
				{
					"name": "RemoveNullRows"
				},
				{
					"name": "VersionSelect"
				},
				{
					"name": "ToTimestamp"
				},
				{
					"name": "QPIDLookup"
				},
				{
					"name": "IDMaxSelect"
				}
			],
			"scriptLines": [
				"source(output(",
				"          QIFDocument as ({@idMax} as integer, {@versionQIF} as string, {@xmlns} as string, Attributes as ({@n} as integer, AttributeBool as ({@name} as string, {@value} as boolean)[], AttributeD1 as ({@name} as string, {@value} as float), AttributeI1 as ({@name} as string, {@value} as integer)[]), Characteristics as (CharacteristicDefinitions as ({@n} as boolean, DiameterCharacteristicDefinition as ({@id} as integer, Tolerance as (DefinedAsLimit as boolean, MaxValue as ({@decimalPlaces} as integer, {@linearUnit} as string, {_value_} as float), MinValue as ({@decimalPlaces} as integer, {@linearUnit} as string, {_value_} as float)))), CharacteristicItems as ({@n} as integer, AngleBetweenCharacteristicItem as ({@id} as integer, CharacteristicNominalId as integer, FeatureItemIds as ({@n} as integer, Id as integer[]), Name as integer)[], AngleCharacteristicItem as ({@id} as integer, CharacteristicNominalId as integer, FeatureItemIds as ({@n} as integer, Id as integer[]), Name as integer)[], AngleFromCharacteristicItem as ({@id} as integer, CharacteristicNominalId as integer, FeatureItemIds as ({@n} as integer, Id as integer[]), Name as integer)[], AngularCoordinateCharacteristicItem as ({@id} as integer, CharacteristicNominalId as integer, FeatureItemIds as ({@n} as integer, Id as integer[]), Name as integer)[], AngularityCharacteristicItem as ({@id} as integer, CharacteristicNominalId as integer, FeatureItemIds as ({@n} as integer, Id as integer[]), Name as integer)[], ChordCharacteristicItem as ({@id} as integer, CharacteristicNominalId as integer, FeatureItemIds as ({@n} as integer, Id as integer[]), Name as integer)[], CircularRunoutCharacteristicItem as ({@id} as integer, CharacteristicNominalId as integer, FeatureItemIds as ({@n} as integer, Id as integer[]), Name as integer)[], CircularityCharacteristicItem as ({@id} as integer, CharacteristicNominalId as integer, FeatureItemIds as ({@n} as integer, Id as integer[]), Name as integer)[], CoaxialityCharacteristicItem as ({@id} as integer, CharacteristicNominalId as integer, FeatureItemIds as ({@n} as integer, Id as integer[]), Name as integer)[], ConcentricityCharacteristicItem as ({@id} as integer, CharacteristicNominalId as integer, FeatureItemIds as ({@n} as integer, Id as integer[]), Name as integer)[], ConicalTaperCharacteristicItem as ({@id} as integer, CharacteristicNominalId as integer, FeatureItemIds as ({@n} as integer, Id as integer[]), Name as integer)[], ConicityCharacteristicItem as ({@id} as integer, CharacteristicNominalId as integer, FeatureItemIds as ({@n} as integer, Id as integer[]), Name as integer)[], CurveLengthCharacteristicItem as ({@id} as integer, CharacteristicNominalId as integer, FeatureItemIds as ({@n} as integer, Id as integer[]), Name as integer)[], CylindricityCharacteristicItem as ({@id} as integer, CharacteristicNominalId as integer, FeatureItemIds as ({@n} as integer, Id as integer[]), Name as integer)[], DepthCharacteristicItem as ({@id} as integer, CharacteristicNominalId as integer, FeatureItemIds as ({@n} as integer, Id as integer[]), Name as integer)[], DiameterCharacteristicItem as ({@id} as integer, CharacteristicNominalId as integer, FeatureItemIds as ({@n} as integer, Id as integer[]), Name as integer)[], DistanceBetweenCharacteristicItem as ({@id} as integer, CharacteristicNominalId as integer, FeatureItemIds as ({@n} as integer, Id as integer[]), Name as integer)[], DistanceFromCharacteristicItem as ({@id} as integer, CharacteristicNominalId as integer, FeatureItemIds as ({@n} as integer, Id as integer[]), Name as integer)[], EllipticityCharacteristicItem as ({@id} as integer, CharacteristicNominalId as integer, FeatureItemIds as ({@n} as integer, Id as integer[]), Name as integer)[], FlatTaperCharacteristicItem as ({@id} as integer, CharacteristicNominalId as integer, FeatureItemIds as ({@n} as integer, Id as integer[]), Name as integer)[], FlatnessCharacteristicItem as ({@id} as integer, CharacteristicNominalId as integer, FeatureItemIds as ({@n} as integer, Id as integer[]), Name as integer)[], HeightCharacteristicItem as ({@id} as integer, CharacteristicNominalId as integer, FeatureItemIds as ({@n} as integer, Id as integer[]), Name as integer)[], LengthCharacteristicItem as ({@id} as integer, CharacteristicNominalId as integer, FeatureItemIds as ({@n} as integer, Id as integer[]), Name as integer)[], LineProfileCharacteristicItem as ({@id} as integer, CharacteristicNominalId as integer, FeatureItemIds as ({@n} as integer, Id as integer[]), Name as integer)[], LinearCoordinateCharacteristicItem as ({@id} as integer, CharacteristicNominalId as integer, FeatureItemIds as ({@n} as integer, Id as integer[]), Name as integer)[], OtherFormCharacteristicItem as ({@id} as integer, CharacteristicNominalId as integer, FeatureItemIds as ({@n} as integer, Id as integer[]), Name as integer)[], ParallelismCharacteristicItem as ({@id} as integer, CharacteristicNominalId as integer, FeatureItemIds as ({@n} as integer, Id as integer[]), Name as integer)[], PerpendicularityCharacteristicItem as ({@id} as integer, CharacteristicNominalId as integer, FeatureItemIds as ({@n} as integer, Id as integer[]), Name as integer)[], PointProfileCharacteristicItem as ({@id} as integer, CharacteristicNominalId as integer, FeatureItemIds as ({@n} as integer, Id as integer[]), Name as integer)[], PositionCharacteristicItem as ({@id} as integer, CharacteristicNominalId as integer, FeatureItemIds as ({@n} as integer, Id as integer[]), Name as integer)[], RadiusCharacteristicItem as ({@id} as integer, CharacteristicNominalId as integer, FeatureItemIds as ({@n} as integer, Id as integer[]), Name as integer)[], SphericalDiameterCharacteristicItem as ({@id} as integer, CharacteristicNominalId as integer, FeatureItemIds as ({@n} as integer, Id as integer[]), Name as integer)[], SphericalRadiusCharacteristicItem as ({@id} as integer, CharacteristicNominalId as integer, FeatureItemIds as ({@n} as integer, Id as integer[]), Name as integer)[], SphericityCharacteristicItem as ({@id} as integer, CharacteristicNominalId as integer, FeatureItemIds as ({@n} as integer, Id as integer[]), Name as integer)[], SquareCharacteristicItem as ({@id} as integer, CharacteristicNominalId as integer, FeatureItemIds as ({@n} as integer, Id as integer[]), Name as integer)[], StraightnessCharacteristicItem as ({@id} as integer, CharacteristicNominalId as integer, FeatureItemIds as ({@n} as integer, Id as integer[]), Name as integer)[], SurfaceProfileCharacteristicItem as ({@id} as integer, CharacteristicNominalId as integer, FeatureItemIds as ({@n} as integer, Id as integer[]), Name as integer)[], SurfaceProfileNonUniformCharacteristicItem as ({@id} as integer, CharacteristicNominalId as integer, FeatureItemIds as ({@n} as integer, Id as integer[]), Name as integer)[], SurfaceTextureCharacteristicItem as ({@id} as integer, CharacteristicNominalId as integer, FeatureItemIds as ({@n} as integer, Id as integer[]), Name as integer)[], SymmetryCharacteristicItem as ({@id} as integer, CharacteristicNominalId as integer, FeatureItemIds as ({@n} as integer, Id as integer[]), Name as integer)[], ThicknessCharacteristicItem as ({@id} as integer, CharacteristicNominalId as integer, FeatureItemIds as ({@n} as integer, Id as integer[]), Name as integer)[], ThreadCharacteristicItem as ({@id} as integer, CharacteristicNominalId as integer, FeatureItemIds as ({@n} as integer, Id as integer[]), Name as integer)[], ToroidicityCharacteristicItem as ({@id} as integer, CharacteristicNominalId as integer, FeatureItemIds as ({@n} as integer, Id as integer[]), Name as integer)[], TotalRunoutCharacteristicItem as ({@id} as integer, CharacteristicNominalId as integer, FeatureItemIds as ({@n} as integer, Id as integer[]), Name as integer)[], UserDefinedAngularCharacteristicItem as ({@id} as integer, CharacteristicNominalId as integer, FeatureItemIds as ({@n} as integer, Id as integer[]), Name as integer)[], UserDefinedAreaCharacteristicItem as ({@id} as integer, CharacteristicNominalId as integer, FeatureItemIds as ({@n} as integer, Id as integer[]), Name as integer)[], UserDefinedAttributeCharacteristicItem as ({@id} as integer, CharacteristicNominalId as integer, FeatureItemIds as ({@n} as integer, Id as integer[]), Name as integer)[], UserDefinedForceCharacteristicItem as ({@id} as integer, CharacteristicNominalId as integer, FeatureItemIds as ({@n} as integer, Id as integer[]), Name as integer)[], UserDefinedLinearCharacteristicItem as ({@id} as integer, CharacteristicNominalId as integer, FeatureItemIds as ({@n} as integer, Id as integer[]), Name as integer)[], UserDefinedMassCharacteristicItem as ({@id} as integer, CharacteristicNominalId as integer, FeatureItemIds as ({@n} as integer, Id as integer[]), Name as integer)[], UserDefinedPressureCharacteristicItem as ({@id} as integer, CharacteristicNominalId as integer, FeatureItemIds as ({@n} as integer, Id as integer[]), Name as integer)[], UserDefinedSpeedCharacteristicItem as ({@id} as integer, CharacteristicNominalId as integer, FeatureItemIds as ({@n} as integer, Id as integer[]), Name as integer)[], UserDefinedTemperatureCharacteristicItem as ({@id} as integer, CharacteristicNominalId as integer, FeatureItemIds as ({@n} as integer, Id as integer[]), Name as integer)[], UserDefinedTimeCharacteristicItem as ({@id} as integer, CharacteristicNominalId as integer, FeatureItemIds as ({@n} as integer, Id as integer[]), Name as integer)[], UserDefinedUnitCharacteristicItem as ({@id} as integer, CharacteristicNominalId as integer, FeatureItemIds as ({@n} as integer, Id as integer[]), Name as integer)[], WeldBevelCharacteristicItem as ({@id} as integer, CharacteristicNominalId as integer, FeatureItemIds as ({@n} as integer, Id as integer[]), Name as integer)[], WeldCompoundCharacteristicItem as ({@id} as integer, CharacteristicNominalId as integer, FeatureItemIds as ({@n} as integer, Id as integer[]), Name as integer)[], WeldEdgeCharacteristicItem as ({@id} as integer, CharacteristicNominalId as integer, FeatureItemIds as ({@n} as integer, Id as integer[]), Name as integer)[], WeldFilletCharacteristicItem as ({@id} as integer, CharacteristicNominalId as integer, FeatureItemIds as ({@n} as integer, Id as integer[]), Name as integer)[], WeldFlareBevelCharacteristicItem as ({@id} as integer, CharacteristicNominalId as integer, FeatureItemIds as ({@n} as integer, Id as integer[]), Name as integer)[], WeldFlareVCharacteristicItem as ({@id} as integer, CharacteristicNominalId as integer, FeatureItemIds as ({@n} as integer, Id as integer[]), Name as integer)[], WeldJCharacteristicItem as ({@id} as integer, CharacteristicNominalId as integer, FeatureItemIds as ({@n} as integer, Id as integer[]), Name as integer)[], WeldPlugCharacteristicItem as ({@id} as integer, CharacteristicNominalId as integer, FeatureItemIds as ({@n} as integer, Id as integer[]), Name as integer)[], WeldScarfCharacteristicItem as ({@id} as integer, CharacteristicNominalId as integer, FeatureItemIds as ({@n} as integer, Id as integer[]), Name as integer)[], WeldSeamCharacteristicItem as ({@id} as integer, CharacteristicNominalId as integer, FeatureItemIds as ({@n} as integer, Id as integer[]), Name as integer)[], WeldSlotCharacteristicItem as ({@id} as integer, CharacteristicNominalId as integer, FeatureItemIds as ({@n} as integer, Id as integer[]), Name as integer)[], WeldSpotCharacteristicItem as ({@id} as integer, CharacteristicNominalId as integer, FeatureItemIds as ({@n} as integer, Id as integer[]), Name as integer)[], WeldSquareCharacteristicItem as ({@id} as integer, CharacteristicNominalId as integer, FeatureItemIds as ({@n} as integer, Id as integer[]), Name as integer)[], WeldStudCharacteristicItem as ({@id} as integer, CharacteristicNominalId as integer, FeatureItemIds as ({@n} as integer, Id as integer[]), Name as integer)[], WeldSurfacingCharacteristicItem as ({@id} as integer, CharacteristicNominalId as integer, FeatureItemIds as ({@n} as integer, Id as integer[]), Name as integer)[], WeldUCharacteristicItem as ({@id} as integer, CharacteristicNominalId as integer, FeatureItemIds as ({@n} as integer, Id as integer[]), Name as integer)[], WeldVCharacteristicItem as ({@id} as integer, CharacteristicNominalId as integer, FeatureItemIds as ({@n} as integer, Id as integer[]), Name as integer)[], WidthCharacteristicItem as ({@id} as integer, CharacteristicNominalId as integer, FeatureItemIds as ({@n} as integer, Id as integer[]), Name as integer)[]), CharacteristicNominals as ({@n} as boolean, DiameterCharacteristicNominal as ({@id} as integer, Attributes as ({@n} as integer, AttributeStr as ({@name} as string, {@value} as boolean), AttributeUser as ({@name} as string, {@nameUserAttribute} as string, UserDataXML as (ReportableStates as ({@n} as boolean, {@xmlns} as string, Reportable as ({@reportType} as integer, {@val} as boolean))))), CharacteristicDefinitionId as integer, CharacteristicDesignator as (Designator as boolean), FeatureNominalIds as ({@n} as boolean, Id as integer), Name as string, TargetValue as ({@decimalPlaces} as integer, {@linearUnit} as string, {_value_} as float))), FormalStandardId as integer), Features as (FeatureDefinitions as ({@n} as boolean, CylinderFeatureDefinition as ({@id} as integer, Bottom as (BottomEnum as string), Diameter as float, InternalExternal as string, Length as boolean)), FeatureItems as ({@n} as integer, CircleFeatureItem as ({@id} as integer, DeterminationMode as (Checked as string), FeatureName as integer, FeatureNominalId as integer)[], CircularArcFeatureItem as ({@id} as integer, DeterminationMode as (Checked as string), FeatureName as integer, FeatureNominalId as integer)[], ConeFeatureItem as ({@id} as integer, DeterminationMode as (Checked as string), FeatureName as integer, FeatureNominalId as integer)[], ConicalSegmentFeatureItem as ({@id} as integer, DeterminationMode as (Checked as string), FeatureName as integer, FeatureNominalId as integer)[], CylinderFeatureItem as ({@id} as integer, DeterminationMode as (Checked as string), FeatureName as integer, FeatureNominalId as integer)[], CylindricalSegmentFeatureItem as ({@id} as integer, DeterminationMode as (Checked as string), FeatureName as integer, FeatureNominalId as integer)[], EdgePointFeatureItem as ({@id} as integer, DeterminationMode as (Checked as string), FeatureName as integer, FeatureNominalId as integer)[], EllipseFeatureItem as ({@id} as integer, DeterminationMode as (Checked as string), FeatureName as integer, FeatureNominalId as integer)[], EllipticalArcFeatureItem as ({@id} as integer, DeterminationMode as (Checked as string), FeatureName as integer, FeatureNominalId as integer)[], ElongatedCircleFeatureItem as ({@id} as integer, DeterminationMode as (Checked as string), FeatureName as integer, FeatureNominalId as integer)[], ElongatedCylinderFeatureItem as ({@id} as integer, DeterminationMode as (Checked as string), FeatureName as integer, FeatureNominalId as integer)[], ExtrudedCrossSectionFeatureItem as ({@id} as integer, DeterminationMode as (Checked as string), FeatureName as integer, FeatureNominalId as integer)[], GroupFeatureItem as ({@id} as integer, DeterminationMode as (Checked as string), FeatureName as integer, FeatureNominalId as integer)[], LineFeatureItem as ({@id} as integer, DeterminationMode as (Checked as string), FeatureName as integer, FeatureNominalId as integer)[], MarkingFeatureItem as ({@id} as integer, DeterminationMode as (Checked as string), FeatureName as integer, FeatureNominalId as integer)[], OppositeAngledLinesFeatureItem as ({@id} as integer, DeterminationMode as (Checked as string), FeatureName as integer, FeatureNominalId as integer)[], OppositeAngledPlanesFeatureItem as ({@id} as integer, DeterminationMode as (Checked as string), FeatureName as integer, FeatureNominalId as integer)[], OppositeParallelLinesFeatureItem as ({@id} as integer, DeterminationMode as (Checked as string), FeatureName as integer, FeatureNominalId as integer)[], OppositeParallelPlanesFeatureItem as ({@id} as integer, DeterminationMode as (Checked as string), FeatureName as integer, FeatureNominalId as integer)[], OtherCurveFeatureItem as ({@id} as integer, DeterminationMode as (Checked as string), FeatureName as integer, FeatureNominalId as integer)[], OtherNonShapeFeatureItem as ({@id} as integer, DeterminationMode as (Checked as string), FeatureName as integer, FeatureNominalId as integer)[], OtherShapeFeatureItem as ({@id} as integer, DeterminationMode as (Checked as string), FeatureName as integer, FeatureNominalId as integer)[], OtherSurfaceFeatureItem as ({@id} as integer, DeterminationMode as (Checked as string), FeatureName as integer, FeatureNominalId as integer)[], PlaneFeatureItem as ({@id} as integer, DeterminationMode as (Checked as string), FeatureName as integer, FeatureNominalId as integer)[], PointDefinedCurveFeatureItem as ({@id} as integer, DeterminationMode as (Checked as string), FeatureName as integer, FeatureNominalId as integer)[], PointDefinedSurfaceFeatureItem as ({@id} as integer, DeterminationMode as (Checked as string), FeatureName as integer, FeatureNominalId as integer)[], PointFeatureItem as ({@id} as integer, DeterminationMode as (Checked as string), FeatureName as integer, FeatureNominalId as integer)[], SphereFeatureItem as ({@id} as integer, DeterminationMode as (Checked as string), FeatureName as integer, FeatureNominalId as integer)[], SphericalSegmentFeatureItem as ({@id} as integer, DeterminationMode as (Checked as string), FeatureName as integer, FeatureNominalId as integer)[], SurfaceOfRevolutionFeatureItem as ({@id} as integer, DeterminationMode as (Checked as string), FeatureName as integer, FeatureNominalId as integer)[], ThreadedFeatureItem as ({@id} as integer, DeterminationMode as (Checked as string), FeatureName as integer, FeatureNominalId as integer)[], ToroidalSegmentFeatureItem as ({@id} as integer, DeterminationMode as (Checked as string), FeatureName as integer, FeatureNominalId as integer)[], TorusFeatureItem as ({@id} as integer, DeterminationMode as (Checked as string), FeatureName as integer, FeatureNominalId as integer)[]), FeatureNominals as ({@n} as boolean, CylinderFeatureNominal as ({@id} as integer, Attributes as ({@n} as integer, AttributeStr as ({@name} as string, {@value} as string)[]), Axis as (AxisPoint as string, Direction as string), EntityInternalIds as ({@n} as boolean, Id as integer), FeatureDefinitionId as integer, Name as string))), FileUnits as (OtherUnits as ({@n} as integer, AngularUnit as (SIUnitName as string, UnitConversion as (Factor as float), UnitName as string)[], LinearUnit as (SIUnitName as string, UnitConversion as (Factor as float), UnitName as string)[], MassUnit as (SIUnitName as string, UnitConversion as (Factor as float), UnitName as string)[]), PrimaryUnits as (LinearUnit as (SIUnitName as string, UnitConversion as (Factor as float), UnitName as string), MassUnit as (SIUnitName as string, UnitName as string), PMIAngularUnit as (SIUnitName as string, UnitConversion as (Factor as float), UnitName as string))), Header as (Application as (Name as string), ApplicationSource as (Name as string), Author as (Name as string, Organization as string)), Product as (GeometrySet as (Curve12Set as ({@n} as integer, Nurbs12 as ({@id} as integer, Nurbs12Core as ({@domain} as string, CPs as ({@count} as integer, {_value_} as string), Knots as ({@count} as integer, {_value_} as string), Order as integer))[], Segment12 as ({@id} as integer, Segment12Core as ({@domain} as string, EndPoint as string, StartPoint as string))[]), Curve13Set as ({@n} as integer, ArcCircular13 as ({@id} as integer, ArcCircular13Core as ({@domain} as string, Center as string, DirBeg as string, Normal as string, Radius as float))[], Segment13 as ({@id} as integer, Segment13Core as ({@domain} as string, EndPoint as string, StartPoint as string))[]), PointSet as ({@n} as integer, Point as ({@id} as integer, XYZ as string)[]), SurfaceSet as ({@n} as integer, Cylinder23 as ({@id} as integer, Cylinder23Core as ({@scaleV} as float, Axis as (AxisPoint as string, Direction as string), Diameter as float, Length as boolean, Sweep as (DirBeg as string, DomainAngle as string))), Plane23 as ({@id} as integer, Plane23Core as ({@domainU} as string, {@domainV} as string, DirU as string, DirV as string, Origin as string))[])), Header as (Application as (Name as string), ApplicationSource as (Name as string), File as (Name as string), MassPropertyTolerance as integer, ModelTolerance as float, ScaleCoefficient as boolean), MaterialLibrary as ({@n} as boolean, Material as ({@Index} as boolean, {@MaterialName} as string)), PartSet as ({@n} as boolean, Part as ({@id} as integer, {@label} as string, {@materialIndex} as boolean, Attributes as ({@n} as integer, AttributeD1 as ({@name} as string, {@value} as integer)[], AttributeStr as ({@name} as string, {@value} as string)), BodyIds as ({@n} as boolean, Id as integer), CharacteristicNominalIds as ({@n} as boolean, Id as integer), FeatureNominalIds as ({@n} as boolean, Id as integer), Header as (Application as (Name as string), ApplicationSource as (Name as string), File as (Name as string)), ModelNumber as string, ViewIds as ({@n} as integer, Id as integer[]))), RootPart as (Id as integer), TopologySet as (BodySet as ({@n} as boolean, Body as ({@color} as string, {@form} as string, {@id} as integer, {@label} as string, EdgeIds as ({@n} as integer, Id as integer[]), FaceIds as ({@n} as integer, Id as integer[]), LoopIds as ({@n} as integer, Id as integer[]), ShellIds as ({@n} as boolean, Id as integer), VertexIds as ({@n} as integer, Id as integer[]))), EdgeSet as ({@n} as integer, Edge as ({@color} as string, {@id} as integer, Curve as (Id as integer), VertexBeg as (Id as integer), VertexEnd as (Id as integer))[]), FaceSet as ({@n} as integer, Face as ({@color} as string, {@id} as integer, {@turned} as boolean, LoopIds as ({@n} as integer, Id as integer[]), Surface as (Id as integer))[]), LoopSet as ({@n} as integer, Loop as ({@color} as string, {@form} as string, {@id} as integer, CoEdges as ({@n} as integer, CoEdge as (Curve12 as (Id as integer), EdgeOriented as ({@turned} as boolean, Id as integer))[]))[]), ShellSet as ({@n} as boolean, Shell as ({@closed} as boolean, {@color} as string, {@id} as integer, FaceIds as ({@n} as integer, Id as integer[]))), VertexSet as ({@n} as integer, Vertex as ({@color} as string, {@id} as integer, Point as (Id as integer))[])), ViewSet as (AnnotationViewSet as ({@n} as boolean, AnnotationView as ({@id} as integer, Direction as string, Normal as string)), CameraSet as ({@n} as integer, Camera as ({@id} as integer, Far as float, Height as float, Near as float, Orientation as (Value as string), Ratio as boolean, ViewPlaneOrigin as string)[]), SavedViewSet as ({@n} as integer, SavedView as ({@id} as integer, {@label} as string, ActiveView as boolean, AnnotationVisibleIds as ({@n} as boolean, Id as integer), Attributes as ({@n} as boolean, AttributeI1 as ({@name} as string, {@value} as boolean)), CameraIds as ({@n} as boolean, Id as integer))[])), VisualizationSet as (Fonts as ({@n} as integer, Font as ({@index} as integer, Name as string, Size as integer)[]), PMIDisplaySet as ({@n} as boolean, PMIDisplay as (Attributes as ({@n} as integer, AttributeBool as ({@name} as string, {@value} as boolean), AttributeI1 as ({@name} as string, {@value} as boolean)[], AttributeI2 as ({@name} as string, {@value} as string), AttributeUser as ({@name} as string, {@nameUserAttribute} as string, UserDataXML as (PresentationColors as ({@xmlns} as string, CrvColor as ({@count} as boolean), TrColor as ({@count} as boolean))))), Color as string, LeaderExtend as (EndPoint as string, HeadForm as string, HeadHeight as float, PointExtension as string, StartPoint as string), Plane as (AnnotationViewId as (Id as integer), Origin as string), Reference as (Id as integer), Texts as ({@fontIndex} as boolean, {@lineHeight} as float, {@n} as integer, Text as (Data as string, XY as string)[]))))), QPId as string, Results as (ActualComponentSets as ({@n} as integer, ActualComponentSet as ({@n} as integer, ActualComponent as ({@id} as integer, SerialNumber as string, Status as (InspectionStatusEnum as string))[])[]), MeasurementResultsSet as ({@n} as integer, MeasurementResults as ({@id} as integer, ActualComponentIds as ({@n} as integer, Id as integer[]), InspectionStatus as (InspectionStatusEnum as string), InspectionTraceability as string, MeasuredCharacteristics as (CharacteristicMeasurements as ({@n} as integer, AngleBetweenCharacteristicMeasurement as ({@id} as integer, ActualComponentId as integer, CharacteristicItemId as integer, FeatureMeasurementIds as ({@n} as integer, Id as integer[]), Status as (CharacteristicStatusEnum as string), Value as ({@decimalPlaces} as integer, {_value_} as float))[], AngleCharacteristicMeasurement as ({@id} as integer, ActualComponentId as integer, CharacteristicItemId as integer, FeatureMeasurementIds as ({@n} as integer, Id as integer[]), Status as (CharacteristicStatusEnum as string), Value as ({@decimalPlaces} as integer, {_value_} as float))[], AngleFromCharacteristicMeasurement as ({@id} as integer, ActualComponentId as integer, CharacteristicItemId as integer, FeatureMeasurementIds as ({@n} as integer, Id as integer[]), Status as (CharacteristicStatusEnum as string), Value as ({@decimalPlaces} as integer, {_value_} as float))[], AngularCoordinateCharacteristicMeasurement as ({@id} as integer, ActualComponentId as integer, CharacteristicItemId as integer, FeatureMeasurementIds as ({@n} as integer, Id as integer[]), Status as (CharacteristicStatusEnum as string), Value as ({@decimalPlaces} as integer, {_value_} as float))[], AngularityCharacteristicMeasurement as ({@id} as integer, ActualComponentId as integer, CharacteristicItemId as integer, FeatureMeasurementIds as ({@n} as integer, Id as integer[]), Status as (CharacteristicStatusEnum as string), Value as ({@decimalPlaces} as integer, {_value_} as float))[], ChordCharacteristicMeasurement as ({@id} as integer, ActualComponentId as integer, CharacteristicItemId as integer, FeatureMeasurementIds as ({@n} as integer, Id as integer[]), Status as (CharacteristicStatusEnum as string), Value as ({@decimalPlaces} as integer, {_value_} as float))[], CircularRunoutCharacteristicMeasurement as ({@id} as integer, ActualComponentId as integer, CharacteristicItemId as integer, FeatureMeasurementIds as ({@n} as integer, Id as integer[]), Status as (CharacteristicStatusEnum as string), Value as ({@decimalPlaces} as integer, {_value_} as float))[], CircularityCharacteristicMeasurement as ({@id} as integer, ActualComponentId as integer, CharacteristicItemId as integer, FeatureMeasurementIds as ({@n} as integer, Id as integer[]), Status as (CharacteristicStatusEnum as string), Value as ({@decimalPlaces} as integer, {_value_} as float))[], CoaxialityCharacteristicMeasurement as ({@id} as integer, ActualComponentId as integer, CharacteristicItemId as integer, FeatureMeasurementIds as ({@n} as integer, Id as integer[]), Status as (CharacteristicStatusEnum as string), Value as ({@decimalPlaces} as integer, {_value_} as float))[], ConcentricityCharacteristicMeasurement as ({@id} as integer, ActualComponentId as integer, CharacteristicItemId as integer, FeatureMeasurementIds as ({@n} as integer, Id as integer[]), Status as (CharacteristicStatusEnum as string), Value as ({@decimalPlaces} as integer, {_value_} as float))[], ConicalTaperCharacteristicMeasurement as ({@id} as integer, ActualComponentId as integer, CharacteristicItemId as integer, FeatureMeasurementIds as ({@n} as integer, Id as integer[]), Status as (CharacteristicStatusEnum as string), Value as ({@decimalPlaces} as integer, {_value_} as float))[], ConicityCharacteristicMeasurement as ({@id} as integer, ActualComponentId as integer, CharacteristicItemId as integer, FeatureMeasurementIds as ({@n} as integer, Id as integer[]), Status as (CharacteristicStatusEnum as string), Value as ({@decimalPlaces} as integer, {_value_} as float))[], CurveLengthCharacteristicMeasurement as ({@id} as integer, ActualComponentId as integer, CharacteristicItemId as integer, FeatureMeasurementIds as ({@n} as integer, Id as integer[]), Status as (CharacteristicStatusEnum as string), Value as ({@decimalPlaces} as integer, {_value_} as float))[], CylindricityCharacteristicMeasurement as ({@id} as integer, ActualComponentId as integer, CharacteristicItemId as integer, FeatureMeasurementIds as ({@n} as integer, Id as integer[]), Status as (CharacteristicStatusEnum as string), Value as ({@decimalPlaces} as integer, {_value_} as float))[], DepthCharacteristicMeasurement as ({@id} as integer, ActualComponentId as integer, CharacteristicItemId as integer, FeatureMeasurementIds as ({@n} as integer, Id as integer[]), Status as (CharacteristicStatusEnum as string), Value as ({@decimalPlaces} as integer, {_value_} as float))[], DiameterCharacteristicMeasurement as ({@id} as integer, ActualComponentId as integer, CharacteristicItemId as integer, FeatureMeasurementIds as ({@n} as integer, Id as integer[]), Status as (CharacteristicStatusEnum as string), Value as ({@decimalPlaces} as integer, {_value_} as float))[], DistanceBetweenCharacteristicMeasurement as ({@id} as integer, ActualComponentId as integer, CharacteristicItemId as integer, FeatureMeasurementIds as ({@n} as integer, Id as integer[]), Status as (CharacteristicStatusEnum as string), Value as ({@decimalPlaces} as integer, {_value_} as float))[], DistanceFromCharacteristicMeasurement as ({@id} as integer, ActualComponentId as integer, CharacteristicItemId as integer, FeatureMeasurementIds as ({@n} as integer, Id as integer[]), Status as (CharacteristicStatusEnum as string), Value as ({@decimalPlaces} as integer, {_value_} as float))[], EllipticityCharacteristicMeasurement as ({@id} as integer, ActualComponentId as integer, CharacteristicItemId as integer, FeatureMeasurementIds as ({@n} as integer, Id as integer[]), Status as (CharacteristicStatusEnum as string), Value as ({@decimalPlaces} as integer, {_value_} as float))[], FlatTaperCharacteristicMeasurement as ({@id} as integer, ActualComponentId as integer, CharacteristicItemId as integer, FeatureMeasurementIds as ({@n} as integer, Id as integer[]), Status as (CharacteristicStatusEnum as string), Value as ({@decimalPlaces} as integer, {_value_} as float))[], FlatnessCharacteristicMeasurement as ({@id} as integer, ActualComponentId as integer, CharacteristicItemId as integer, FeatureMeasurementIds as ({@n} as integer, Id as integer[]), Status as (CharacteristicStatusEnum as string), Value as ({@decimalPlaces} as integer, {_value_} as float))[], HeightCharacteristicMeasurement as ({@id} as integer, ActualComponentId as integer, CharacteristicItemId as integer, FeatureMeasurementIds as ({@n} as integer, Id as integer[]), Status as (CharacteristicStatusEnum as string), Value as ({@decimalPlaces} as integer, {_value_} as float))[], LengthCharacteristicMeasurement as ({@id} as integer, ActualComponentId as integer, CharacteristicItemId as integer, FeatureMeasurementIds as ({@n} as integer, Id as integer[]), Status as (CharacteristicStatusEnum as string), Value as ({@decimalPlaces} as integer, {_value_} as float))[], LineProfileCharacteristicMeasurement as ({@id} as integer, ActualComponentId as integer, CharacteristicItemId as integer, FeatureMeasurementIds as ({@n} as integer, Id as integer[]), Status as (CharacteristicStatusEnum as string), Value as ({@decimalPlaces} as integer, {_value_} as float))[], LinearCoordinateCharacteristicMeasurement as ({@id} as integer, ActualComponentId as integer, CharacteristicItemId as integer, FeatureMeasurementIds as ({@n} as integer, Id as integer[]), Status as (CharacteristicStatusEnum as string), Value as ({@decimalPlaces} as integer, {_value_} as float))[], OtherFormCharacteristicMeasurement as ({@id} as integer, ActualComponentId as integer, CharacteristicItemId as integer, FeatureMeasurementIds as ({@n} as integer, Id as integer[]), Status as (CharacteristicStatusEnum as string), Value as ({@decimalPlaces} as integer, {_value_} as float))[], ParallelismCharacteristicMeasurement as ({@id} as integer, ActualComponentId as integer, CharacteristicItemId as integer, FeatureMeasurementIds as ({@n} as integer, Id as integer[]), Status as (CharacteristicStatusEnum as string), Value as ({@decimalPlaces} as integer, {_value_} as float))[], PerpendicularityCharacteristicMeasurement as ({@id} as integer, ActualComponentId as integer, CharacteristicItemId as integer, FeatureMeasurementIds as ({@n} as integer, Id as integer[]), Status as (CharacteristicStatusEnum as string), Value as ({@decimalPlaces} as integer, {_value_} as float))[], PointProfileCharacteristicMeasurement as ({@id} as integer, ActualComponentId as integer, CharacteristicItemId as integer, FeatureMeasurementIds as ({@n} as integer, Id as integer[]), Status as (CharacteristicStatusEnum as string), Value as ({@decimalPlaces} as integer, {_value_} as float))[], PositionCharacteristicMeasurement as ({@id} as integer, ActualComponentId as integer, CharacteristicItemId as integer, FeatureMeasurementIds as ({@n} as integer, Id as integer[]), Status as (CharacteristicStatusEnum as string), Value as ({@decimalPlaces} as integer, {_value_} as float))[], RadiusCharacteristicMeasurement as ({@id} as integer, ActualComponentId as integer, CharacteristicItemId as integer, FeatureMeasurementIds as ({@n} as integer, Id as integer[]), Status as (CharacteristicStatusEnum as string), Value as ({@decimalPlaces} as integer, {_value_} as float))[], SphericalDiameterCharacteristicMeasurement as ({@id} as integer, ActualComponentId as integer, CharacteristicItemId as integer, FeatureMeasurementIds as ({@n} as integer, Id as integer[]), Status as (CharacteristicStatusEnum as string), Value as ({@decimalPlaces} as integer, {_value_} as float))[], SphericalRadiusCharacteristicMeasurement as ({@id} as integer, ActualComponentId as integer, CharacteristicItemId as integer, FeatureMeasurementIds as ({@n} as integer, Id as integer[]), Status as (CharacteristicStatusEnum as string), Value as ({@decimalPlaces} as integer, {_value_} as float))[], SphericityCharacteristicMeasurement as ({@id} as integer, ActualComponentId as integer, CharacteristicItemId as integer, FeatureMeasurementIds as ({@n} as integer, Id as integer[]), Status as (CharacteristicStatusEnum as string), Value as ({@decimalPlaces} as integer, {_value_} as float))[], SquareCharacteristicMeasurement as ({@id} as integer, ActualComponentId as integer, CharacteristicItemId as integer, FeatureMeasurementIds as ({@n} as integer, Id as integer[]), Status as (CharacteristicStatusEnum as string), Value as ({@decimalPlaces} as integer, {_value_} as float))[], StraightnessCharacteristicMeasurement as ({@id} as integer, ActualComponentId as integer, CharacteristicItemId as integer, FeatureMeasurementIds as ({@n} as integer, Id as integer[]), Status as (CharacteristicStatusEnum as string), Value as ({@decimalPlaces} as integer, {_value_} as float))[], SurfaceProfileCharacteristicMeasurement as ({@id} as integer, ActualComponentId as integer, CharacteristicItemId as integer, FeatureMeasurementIds as ({@n} as integer, Id as integer[]), Status as (CharacteristicStatusEnum as string), Value as ({@decimalPlaces} as integer, {_value_} as float))[], SurfaceProfileNonUniformCharacteristicMeasurement as ({@id} as integer, ActualComponentId as integer, CharacteristicItemId as integer, FeatureMeasurementIds as ({@n} as integer, Id as integer[]), Status as (CharacteristicStatusEnum as string), Value as ({@decimalPlaces} as integer, {_value_} as float))[], SurfaceTextureCharacteristicMeasurement as ({@id} as integer, ActualComponentId as integer, CharacteristicItemId as integer, FeatureMeasurementIds as ({@n} as integer, Id as integer[]), Status as (CharacteristicStatusEnum as string), Value as ({@decimalPlaces} as integer, {_value_} as float))[], SymmetryCharacteristicMeasurement as ({@id} as integer, ActualComponentId as integer, CharacteristicItemId as integer, FeatureMeasurementIds as ({@n} as integer, Id as integer[]), Status as (CharacteristicStatusEnum as string), Value as ({@decimalPlaces} as integer, {_value_} as float))[], ThicknessCharacteristicMeasurement as ({@id} as integer, ActualComponentId as integer, CharacteristicItemId as integer, FeatureMeasurementIds as ({@n} as integer, Id as integer[]), Status as (CharacteristicStatusEnum as string), Value as ({@decimalPlaces} as integer, {_value_} as float))[], ThreadCharacteristicMeasurement as ({@id} as integer, ActualComponentId as integer, CharacteristicItemId as integer, FeatureMeasurementIds as ({@n} as integer, Id as integer[]), Status as (CharacteristicStatusEnum as string), Value as ({@decimalPlaces} as integer, {_value_} as float))[], ToroidicityCharacteristicMeasurement as ({@id} as integer, ActualComponentId as integer, CharacteristicItemId as integer, FeatureMeasurementIds as ({@n} as integer, Id as integer[]), Status as (CharacteristicStatusEnum as string), Value as ({@decimalPlaces} as integer, {_value_} as float))[], TotalRunoutCharacteristicMeasurement as ({@id} as integer, ActualComponentId as integer, CharacteristicItemId as integer, FeatureMeasurementIds as ({@n} as integer, Id as integer[]), Status as (CharacteristicStatusEnum as string), Value as ({@decimalPlaces} as integer, {_value_} as float))[], UserDefinedAngularCharacteristicMeasurement as ({@id} as integer, ActualComponentId as integer, CharacteristicItemId as integer, FeatureMeasurementIds as ({@n} as integer, Id as integer[]), Status as (CharacteristicStatusEnum as string), Value as ({@decimalPlaces} as integer, {_value_} as float))[], UserDefinedAreaCharacteristicMeasurement as ({@id} as integer, ActualComponentId as integer, CharacteristicItemId as integer, FeatureMeasurementIds as ({@n} as integer, Id as integer[]), Status as (CharacteristicStatusEnum as string), Value as ({@decimalPlaces} as integer, {_value_} as float))[], UserDefinedAttributeCharacteristicMeasurement as ({@id} as integer, ActualComponentId as integer, CharacteristicItemId as integer, FeatureMeasurementIds as ({@n} as integer, Id as integer[]), Status as (CharacteristicStatusEnum as string), Value as ({@decimalPlaces} as integer, {_value_} as float))[], UserDefinedForceCharacteristicMeasurement as ({@id} as integer, ActualComponentId as integer, CharacteristicItemId as integer, FeatureMeasurementIds as ({@n} as integer, Id as integer[]), Status as (CharacteristicStatusEnum as string), Value as ({@decimalPlaces} as integer, {_value_} as float))[], UserDefinedLinearCharacteristicMeasurement as ({@id} as integer, ActualComponentId as integer, CharacteristicItemId as integer, FeatureMeasurementIds as ({@n} as integer, Id as integer[]), Status as (CharacteristicStatusEnum as string), Value as ({@decimalPlaces} as integer, {_value_} as float))[], UserDefinedMassCharacteristicMeasurement as ({@id} as integer, ActualComponentId as integer, CharacteristicItemId as integer, FeatureMeasurementIds as ({@n} as integer, Id as integer[]), Status as (CharacteristicStatusEnum as string), Value as ({@decimalPlaces} as integer, {_value_} as float))[], UserDefinedPressureCharacteristicMeasurement as ({@id} as integer, ActualComponentId as integer, CharacteristicItemId as integer, FeatureMeasurementIds as ({@n} as integer, Id as integer[]), Status as (CharacteristicStatusEnum as string), Value as ({@decimalPlaces} as integer, {_value_} as float))[], UserDefinedSpeedCharacteristicMeasurement as ({@id} as integer, ActualComponentId as integer, CharacteristicItemId as integer, FeatureMeasurementIds as ({@n} as integer, Id as integer[]), Status as (CharacteristicStatusEnum as string), Value as ({@decimalPlaces} as integer, {_value_} as float))[], UserDefinedTemperatureCharacteristicMeasurement as ({@id} as integer, ActualComponentId as integer, CharacteristicItemId as integer, FeatureMeasurementIds as ({@n} as integer, Id as integer[]), Status as (CharacteristicStatusEnum as string), Value as ({@decimalPlaces} as integer, {_value_} as float))[], UserDefinedTimeCharacteristicMeasurement as ({@id} as integer, ActualComponentId as integer, CharacteristicItemId as integer, FeatureMeasurementIds as ({@n} as integer, Id as integer[]), Status as (CharacteristicStatusEnum as string), Value as ({@decimalPlaces} as integer, {_value_} as float))[], UserDefinedUnitCharacteristicMeasurement as ({@id} as integer, ActualComponentId as integer, CharacteristicItemId as integer, FeatureMeasurementIds as ({@n} as integer, Id as integer[]), Status as (CharacteristicStatusEnum as string), Value as ({@decimalPlaces} as integer, {_value_} as float))[], WeldBevelCharacteristicMeasurement as ({@id} as integer, ActualComponentId as integer, CharacteristicItemId as integer, FeatureMeasurementIds as ({@n} as integer, Id as integer[]), Status as (CharacteristicStatusEnum as string), Value as ({@decimalPlaces} as integer, {_value_} as float))[], WeldCompoundCharacteristicMeasurement as ({@id} as integer, ActualComponentId as integer, CharacteristicItemId as integer, FeatureMeasurementIds as ({@n} as integer, Id as integer[]), Status as (CharacteristicStatusEnum as string), Value as ({@decimalPlaces} as integer, {_value_} as float))[], WeldEdgeCharacteristicMeasurement as ({@id} as integer, ActualComponentId as integer, CharacteristicItemId as integer, FeatureMeasurementIds as ({@n} as integer, Id as integer[]), Status as (CharacteristicStatusEnum as string), Value as ({@decimalPlaces} as integer, {_value_} as float))[], WeldFilletCharacteristicMeasurement as ({@id} as integer, ActualComponentId as integer, CharacteristicItemId as integer, FeatureMeasurementIds as ({@n} as integer, Id as integer[]), Status as (CharacteristicStatusEnum as string), Value as ({@decimalPlaces} as integer, {_value_} as float))[], WeldFlareBevelCharacteristicMeasurement as ({@id} as integer, ActualComponentId as integer, CharacteristicItemId as integer, FeatureMeasurementIds as ({@n} as integer, Id as integer[]), Status as (CharacteristicStatusEnum as string), Value as ({@decimalPlaces} as integer, {_value_} as float))[], WeldFlareVCharacteristicMeasurement as ({@id} as integer, ActualComponentId as integer, CharacteristicItemId as integer, FeatureMeasurementIds as ({@n} as integer, Id as integer[]), Status as (CharacteristicStatusEnum as string), Value as ({@decimalPlaces} as integer, {_value_} as float))[], WeldJCharacteristicMeasurement as ({@id} as integer, ActualComponentId as integer, CharacteristicItemId as integer, FeatureMeasurementIds as ({@n} as integer, Id as integer[]), Status as (CharacteristicStatusEnum as string), Value as ({@decimalPlaces} as integer, {_value_} as float))[], WeldPlugCharacteristicMeasurement as ({@id} as integer, ActualComponentId as integer, CharacteristicItemId as integer, FeatureMeasurementIds as ({@n} as integer, Id as integer[]), Status as (CharacteristicStatusEnum as string), Value as ({@decimalPlaces} as integer, {_value_} as float))[], WeldScarfCharacteristicMeasurement as ({@id} as integer, ActualComponentId as integer, CharacteristicItemId as integer, FeatureMeasurementIds as ({@n} as integer, Id as integer[]), Status as (CharacteristicStatusEnum as string), Value as ({@decimalPlaces} as integer, {_value_} as float))[], WeldSeamCharacteristicMeasurement as ({@id} as integer, ActualComponentId as integer, CharacteristicItemId as integer, FeatureMeasurementIds as ({@n} as integer, Id as integer[]), Status as (CharacteristicStatusEnum as string), Value as ({@decimalPlaces} as integer, {_value_} as float))[], WeldSlotCharacteristicMeasurement as ({@id} as integer, ActualComponentId as integer, CharacteristicItemId as integer, FeatureMeasurementIds as ({@n} as integer, Id as integer[]), Status as (CharacteristicStatusEnum as string), Value as ({@decimalPlaces} as integer, {_value_} as float))[], WeldSpotCharacteristicMeasurement as ({@id} as integer, ActualComponentId as integer, CharacteristicItemId as integer, FeatureMeasurementIds as ({@n} as integer, Id as integer[]), Status as (CharacteristicStatusEnum as string), Value as ({@decimalPlaces} as integer, {_value_} as float))[], WeldSquareCharacteristicMeasurement as ({@id} as integer, ActualComponentId as integer, CharacteristicItemId as integer, FeatureMeasurementIds as ({@n} as integer, Id as integer[]), Status as (CharacteristicStatusEnum as string), Value as ({@decimalPlaces} as integer, {_value_} as float))[], WeldStudCharacteristicMeasurement as ({@id} as integer, ActualComponentId as integer, CharacteristicItemId as integer, FeatureMeasurementIds as ({@n} as integer, Id as integer[]), Status as (CharacteristicStatusEnum as string), Value as ({@decimalPlaces} as integer, {_value_} as float))[], WeldSurfacingCharacteristicMeasurement as ({@id} as integer, ActualComponentId as integer, CharacteristicItemId as integer, FeatureMeasurementIds as ({@n} as integer, Id as integer[]), Status as (CharacteristicStatusEnum as string), Value as ({@decimalPlaces} as integer, {_value_} as float))[], WeldUCharacteristicMeasurement as ({@id} as integer, ActualComponentId as integer, CharacteristicItemId as integer, FeatureMeasurementIds as ({@n} as integer, Id as integer[]), Status as (CharacteristicStatusEnum as string), Value as ({@decimalPlaces} as integer, {_value_} as float))[], WeldVCharacteristicMeasurement as ({@id} as integer, ActualComponentId as integer, CharacteristicItemId as integer, FeatureMeasurementIds as ({@n} as integer, Id as integer[]), Status as (CharacteristicStatusEnum as string), Value as ({@decimalPlaces} as integer, {_value_} as float))[], WidthCharacteristicMeasurement as ({@id} as integer, ActualComponentId as integer, CharacteristicItemId as integer, FeatureMeasurementIds as ({@n} as integer, Id as integer[]), Status as (CharacteristicStatusEnum as string), Value as ({@decimalPlaces} as integer, {_value_} as float))[])), MeasuredFeatures as ({@n} as integer, CircleFeatureMeasurement as ({@id} as integer, ActualComponentId as integer, FeatureItemId as integer)[], CircularArcFeatureMeasurement as ({@id} as integer, ActualComponentId as integer, FeatureItemId as integer)[], ConeFeatureMeasurement as ({@id} as integer, ActualComponentId as integer, FeatureItemId as integer)[], ConicalSegmentFeatureMeasurement as ({@id} as integer, ActualComponentId as integer, FeatureItemId as integer)[], CylinderFeatureMeasurement as ({@id} as integer, ActualComponentId as integer, FeatureItemId as integer)[], CylindricalSegmentFeatureMeasurement as ({@id} as integer, ActualComponentId as integer, FeatureItemId as integer)[], EdgePointFeatureMeasurement as ({@id} as integer, ActualComponentId as integer, FeatureItemId as integer)[], EllipseFeatureMeasurement as ({@id} as integer, ActualComponentId as integer, FeatureItemId as integer)[], EllipticalArcFeatureMeasurement as ({@id} as integer, ActualComponentId as integer, FeatureItemId as integer)[], ElongatedCircleFeatureMeasurement as ({@id} as integer, ActualComponentId as integer, FeatureItemId as integer)[], ElongatedCylinderFeatureMeasurement as ({@id} as integer, ActualComponentId as integer, FeatureItemId as integer)[], ExtrudedCrossSectionFeatureMeasurement as ({@id} as integer, ActualComponentId as integer, FeatureItemId as integer)[], GroupFeatureMeasurement as ({@id} as integer, ActualComponentId as integer, FeatureItemId as integer)[], LineFeatureMeasurement as ({@id} as integer, ActualComponentId as integer, FeatureItemId as integer)[], MarkingFeatureMeasurement as ({@id} as integer, ActualComponentId as integer, FeatureItemId as integer)[], OppositeAngledLinesFeatureMeasurement as ({@id} as integer, ActualComponentId as integer, FeatureItemId as integer)[], OppositeAngledPlanesFeatureMeasurement as ({@id} as integer, ActualComponentId as integer, FeatureItemId as integer)[], OppositeParallelLinesFeatureMeasurement as ({@id} as integer, ActualComponentId as integer, FeatureItemId as integer)[], OppositeParallelPlanesFeatureMeasurement as ({@id} as integer, ActualComponentId as integer, FeatureItemId as integer)[], OtherCurveFeatureMeasurement as ({@id} as integer, ActualComponentId as integer, FeatureItemId as integer)[], OtherNonShapeFeatureMeasurement as ({@id} as integer, ActualComponentId as integer, FeatureItemId as integer)[], OtherShapeFeatureMeasurement as ({@id} as integer, ActualComponentId as integer, FeatureItemId as integer)[], OtherSurfaceFeatureMeasurement as ({@id} as integer, ActualComponentId as integer, FeatureItemId as integer)[], PlaneFeatureMeasurement as ({@id} as integer, ActualComponentId as integer, FeatureItemId as integer)[], PointDefinedCurveFeatureMeasurement as ({@id} as integer, ActualComponentId as integer, FeatureItemId as integer)[], PointDefinedSurfaceFeatureMeasurement as ({@id} as integer, ActualComponentId as integer, FeatureItemId as integer)[], PointFeatureMeasurement as ({@id} as integer, ActualComponentId as integer, FeatureItemId as integer)[], SphereFeatureMeasurement as ({@id} as integer, ActualComponentId as integer, FeatureItemId as integer)[], SphericalSegmentFeatureMeasurement as ({@id} as integer, ActualComponentId as integer, FeatureItemId as integer)[], SurfaceOfRevolutionFeatureMeasurement as ({@id} as integer, ActualComponentId as integer, FeatureItemId as integer)[], ThreadedFeatureMeasurement as ({@id} as integer, ActualComponentId as integer, FeatureItemId as integer)[], ToroidalSegmentFeatureMeasurement as ({@id} as integer, ActualComponentId as integer, FeatureItemId as integer)[], TorusFeatureMeasurement as ({@id} as integer, ActualComponentId as integer, FeatureItemId as integer)[]))[])), StandardsDefinitions as ({@n} as boolean, Standard as ({@id} as integer, Designator as string, Organization as (StandardsOrganizationEnum as string))), Version as (TimeCreated as string))",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     inferDriftedColumnTypes: true,",
				"     ignoreNoFilesFound: false,",
				"     format: 'xml',",
				"     container: 'measurementqifin',",
				"     validationMode: 'none',",
				"     namespaces: false,",
				"     dateFormats: ['MM/dd/yyyy'],",
				"     preferredIntegralType: 'integer',",
				"     preferredFractionalType: 'float',",
				"     wildcardPaths:['AerohubMFINMapping.qif']) ~> MeasurementQIFIn",
				"source(output(",
				"          QPID as string,",
				"          IDMax as integer,",
				"          MBD as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> QIFDocumentSource",
				"CharacteristicItemSelect foldDown(unroll(CharacteristicItems.AngleBetweenCharacteristicItem),",
				"     mapColumn(",
				"          QPID = QPId,",
				"          CharacteristicType = CharacteristicItems.AngleBetweenCharacteristicItem,",
				"          id = CharacteristicItems.AngleBetweenCharacteristicItem.{@id},",
				"          Name = CharacteristicItems.AngleBetweenCharacteristicItem.Name,",
				"          CharacteristicNominalid = CharacteristicItems.AngleBetweenCharacteristicItem.CharacteristicNominalId",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> AngleBetweenFlatten",
				"MeasurementQIFIn select(mapColumn(",
				"          CharacteristicItems = QIFDocument.Characteristics.CharacteristicItems,",
				"          QPId = QIFDocument.QPId",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> CharacteristicItemSelect",
				"CharacteristicItemSelect foldDown(unroll(CharacteristicItems.AngleCharacteristicItem),",
				"     mapColumn(",
				"          QPID = QPId,",
				"          CharacteristicType = CharacteristicItems.AngleCharacteristicItem,",
				"          id = CharacteristicItems.AngleCharacteristicItem.{@id},",
				"          Name = CharacteristicItems.AngleCharacteristicItem.Name,",
				"          CharacteristicNominalid = CharacteristicItems.AngleCharacteristicItem.CharacteristicNominalId",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> AngleFlatten",
				"CharacteristicItemSelect foldDown(unroll(CharacteristicItems.AngularCoordinateCharacteristicItem),",
				"     mapColumn(",
				"          QPID = QPId,",
				"          CharacteristicType = CharacteristicItems.AngularCoordinateCharacteristicItem,",
				"          id = CharacteristicItems.AngularCoordinateCharacteristicItem.{@id},",
				"          Name = CharacteristicItems.AngularCoordinateCharacteristicItem.Name,",
				"          CharacteristicNominalid = CharacteristicItems.AngularCoordinateCharacteristicItem.CharacteristicNominalId",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> AngularCoordinateFlatten",
				"AngularCoordinateFlatten derive(CharacteristicType = toString(iif(isNull(CharacteristicType) == false(),'AnglularCoordinate'))) ~> AngularCoordinateType",
				"AngleFlatten derive(CharacteristicType = toString(iif(isNull(CharacteristicType) == false(),'Angle'))) ~> AngleType",
				"AngleBetweenFlatten derive(CharacteristicType = toString('AngleBetween')) ~> AngleBetweenType",
				"CharacteristicItemSelect foldDown(unroll(CharacteristicItems.AngleFromCharacteristicItem),",
				"     mapColumn(",
				"          QPID = QPId,",
				"          CharacteristicType = CharacteristicItems.AngleFromCharacteristicItem,",
				"          id = CharacteristicItems.AngleFromCharacteristicItem.{@id},",
				"          Name = CharacteristicItems.AngleFromCharacteristicItem.Name,",
				"          CharacteristicNominalid = CharacteristicItems.AngleFromCharacteristicItem.CharacteristicNominalId",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> AngleFromFlatten",
				"AngleFromFlatten derive(CharacteristicType = toString(iif(isNull(CharacteristicType) == false(),'AngleFrom'))) ~> AngleFromType",
				"CharacteristicItemSelect foldDown(unroll(CharacteristicItems.AngularityCharacteristicItem),",
				"     mapColumn(",
				"          QPID = QPId,",
				"          CharacteristicType = CharacteristicItems.AngularityCharacteristicItem,",
				"          id = CharacteristicItems.AngularityCharacteristicItem.{@id},",
				"          Name = CharacteristicItems.AngularityCharacteristicItem.Name,",
				"          CharacteristicNominalid = CharacteristicItems.AngularityCharacteristicItem.CharacteristicNominalId",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> AngularityFlatten",
				"AngularityFlatten derive(CharacteristicType = toString(iif(isNull(CharacteristicType) == false(),'Angularity'))) ~> AngularityType",
				"CharacteristicItemSelect foldDown(unroll(CharacteristicItems.ChordCharacteristicItem),",
				"     mapColumn(",
				"          QPID = QPId,",
				"          CharacteristicType = CharacteristicItems.ChordCharacteristicItem,",
				"          id = CharacteristicItems.ChordCharacteristicItem.{@id},",
				"          Name = CharacteristicItems.ChordCharacteristicItem.Name,",
				"          CharacteristicNominalid = CharacteristicItems.ChordCharacteristicItem.CharacteristicNominalId",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> ChordFlatten",
				"ChordFlatten derive(CharacteristicType = toString(iif(isNull(CharacteristicType) == false(),'Chord'))) ~> ChordType",
				"CharacteristicItemSelect foldDown(unroll(CharacteristicItems.CircularityCharacteristicItem),",
				"     mapColumn(",
				"          QPID = QPId,",
				"          CharacteristicType = CharacteristicItems.CircularityCharacteristicItem,",
				"          id = CharacteristicItems.CircularityCharacteristicItem.{@id},",
				"          Name = CharacteristicItems.CircularityCharacteristicItem.Name,",
				"          CharacteristicNominalid = CharacteristicItems.CircularityCharacteristicItem.CharacteristicNominalId",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> CircularityFlatten",
				"CircularityFlatten derive(CharacteristicType = toString(iif(isNull(CharacteristicType) == false(),'Circularity'))) ~> CircularityType",
				"CharacteristicItemSelect foldDown(unroll(CharacteristicItems.CircularRunoutCharacteristicItem),",
				"     mapColumn(",
				"          QPID = QPId,",
				"          CharacteristicType = CharacteristicItems.CircularRunoutCharacteristicItem,",
				"          id = CharacteristicItems.CircularRunoutCharacteristicItem.{@id},",
				"          Name = CharacteristicItems.CircularRunoutCharacteristicItem.Name,",
				"          CharacteristicNominalid = CharacteristicItems.CircularRunoutCharacteristicItem.CharacteristicNominalId",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> CircularRunoutFlatten",
				"CircularRunoutFlatten derive(CharacteristicType = toString(iif(isNull(CharacteristicType) == false(),'CircularRunout'))) ~> CircularRunoutType",
				"CharacteristicItemSelect foldDown(unroll(CharacteristicItems.CoaxialityCharacteristicItem),",
				"     mapColumn(",
				"          QPID = QPId,",
				"          CharacteristicType = CharacteristicItems.CoaxialityCharacteristicItem,",
				"          id = CharacteristicItems.CoaxialityCharacteristicItem.{@id},",
				"          Name = CharacteristicItems.CoaxialityCharacteristicItem.Name,",
				"          CharacteristicNominalid = CharacteristicItems.CoaxialityCharacteristicItem.CharacteristicNominalId",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> CoaxialityFlatten",
				"CoaxialityFlatten derive(CharacteristicType = toString(iif(isNull(CharacteristicType) == false(),'Coaxiality'))) ~> CoaxialityType",
				"CharacteristicItemSelect foldDown(unroll(CharacteristicItems.ConcentricityCharacteristicItem),",
				"     mapColumn(",
				"          QPID = QPId,",
				"          CharacteristicType = CharacteristicItems.ConcentricityCharacteristicItem,",
				"          id = CharacteristicItems.ConcentricityCharacteristicItem.{@id},",
				"          Name = CharacteristicItems.ConcentricityCharacteristicItem.Name,",
				"          CharacteristicNominalid = CharacteristicItems.ConcentricityCharacteristicItem.CharacteristicNominalId",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> ConcentricityFlatten",
				"ConcentricityFlatten derive(CharacteristicType = toString(iif(isNull(CharacteristicType) == false(),'Concentricity'))) ~> ConcentricityType",
				"CharacteristicItemSelect foldDown(unroll(CharacteristicItems.ConicalTaperCharacteristicItem),",
				"     mapColumn(",
				"          QPID = QPId,",
				"          CharacteristicType = CharacteristicItems.ConicalTaperCharacteristicItem,",
				"          id = CharacteristicItems.ConicalTaperCharacteristicItem.{@id},",
				"          Name = CharacteristicItems.ConicalTaperCharacteristicItem.Name,",
				"          CharacteristicNominalid = CharacteristicItems.ConicalTaperCharacteristicItem.CharacteristicNominalId",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> ConicalTaperFlatten",
				"ConicalTaperFlatten derive(CharacteristicType = toString(iif(isNull(CharacteristicType) == false(),'ConicalTaper'))) ~> ConicalTaperType",
				"CharacteristicItemSelect foldDown(unroll(CharacteristicItems.ConicityCharacteristicItem),",
				"     mapColumn(",
				"          QPID = QPId,",
				"          CharacteristicType = CharacteristicItems.ConicityCharacteristicItem,",
				"          id = CharacteristicItems.ConicityCharacteristicItem.{@id},",
				"          CharacteristicNominalid = CharacteristicItems.ConicityCharacteristicItem.CharacteristicNominalId,",
				"          Name = CharacteristicItems.ConicityCharacteristicItem.Name",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> ConicityFlatten",
				"ConicityFlatten derive(CharacteristicType = toString(iif(isNull(CharacteristicType) == false(),'Conicity'))) ~> ConicityType",
				"CharacteristicItemSelect foldDown(unroll(CharacteristicItems.CurveLengthCharacteristicItem),",
				"     mapColumn(",
				"          QPID = QPId,",
				"          CharacteristicType = CharacteristicItems.CurveLengthCharacteristicItem,",
				"          id = CharacteristicItems.CurveLengthCharacteristicItem.{@id},",
				"          Name = CharacteristicItems.CurveLengthCharacteristicItem.Name,",
				"          CharacteristicNominalid = CharacteristicItems.CurveLengthCharacteristicItem.CharacteristicNominalId",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> CurveLengthFlatten",
				"CurveLengthFlatten derive(CharacteristicType = toString(iif(isNull(CharacteristicType) == false(),'CurveLength'))) ~> CurveLengthType",
				"CharacteristicItemSelect foldDown(unroll(CharacteristicItems.CylindricityCharacteristicItem),",
				"     mapColumn(",
				"          QPID = QPId,",
				"          CharacteristicType = CharacteristicItems.CylindricityCharacteristicItem,",
				"          id = CharacteristicItems.CylindricityCharacteristicItem.{@id},",
				"          Name = CharacteristicItems.CylindricityCharacteristicItem.Name,",
				"          CharacteristicNominalid = CharacteristicItems.CylindricityCharacteristicItem.CharacteristicNominalId",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> CylindricityFlatten",
				"CylindricityFlatten derive(CharacteristicType = toString(iif(isNull(CharacteristicType) == false(),'Cylindricity'))) ~> CylindricityType",
				"CharacteristicItemSelect foldDown(unroll(CharacteristicItems.DepthCharacteristicItem),",
				"     mapColumn(",
				"          QPID = QPId,",
				"          CharacteristicType = CharacteristicItems.DepthCharacteristicItem,",
				"          id = CharacteristicItems.DepthCharacteristicItem.{@id},",
				"          Name = CharacteristicItems.DepthCharacteristicItem.Name,",
				"          CharacteristicNominalid = CharacteristicItems.DepthCharacteristicItem.CharacteristicNominalId",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> DepthFlatten",
				"DepthFlatten derive(CharacteristicType = toString(iif(isNull(CharacteristicType) == false(),'Depth'))) ~> DepthType",
				"CharacteristicItemSelect foldDown(unroll(CharacteristicItems.DiameterCharacteristicItem),",
				"     mapColumn(",
				"          QPID = QPId,",
				"          CharacteristicType = CharacteristicItems.DiameterCharacteristicItem,",
				"          id = CharacteristicItems.DiameterCharacteristicItem.{@id},",
				"          Name = CharacteristicItems.DiameterCharacteristicItem.Name,",
				"          CharacteristicNominalid = CharacteristicItems.DiameterCharacteristicItem.CharacteristicNominalId",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> DiameterFlatten",
				"DiameterFlatten derive(CharacteristicType = toString(iif(isNull(CharacteristicType) == false(),'Diameter'))) ~> DiameterType",
				"CharacteristicItemSelect foldDown(unroll(CharacteristicItems.DistanceBetweenCharacteristicItem),",
				"     mapColumn(",
				"          QPID = QPId,",
				"          CharacteristicType = CharacteristicItems.DistanceBetweenCharacteristicItem,",
				"          id = CharacteristicItems.DistanceBetweenCharacteristicItem.{@id},",
				"          Name = CharacteristicItems.DistanceBetweenCharacteristicItem.Name,",
				"          CharacteristicNominalid = CharacteristicItems.DistanceBetweenCharacteristicItem.CharacteristicNominalId",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> DistanceBetweenFlatten",
				"DistanceBetweenFlatten derive(CharacteristicType = toString(iif(isNull(CharacteristicType) == false(),'DistanceBetween'))) ~> DistanceBetweenType",
				"CharacteristicItemSelect foldDown(unroll(CharacteristicItems.DistanceFromCharacteristicItem),",
				"     mapColumn(",
				"          QPID = QPId,",
				"          CharacteristicType = CharacteristicItems.DistanceFromCharacteristicItem,",
				"          id = CharacteristicItems.DistanceFromCharacteristicItem.{@id},",
				"          Name = CharacteristicItems.DistanceFromCharacteristicItem.Name,",
				"          CharacteristicNominalid = CharacteristicItems.DistanceFromCharacteristicItem.CharacteristicNominalId",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> DistanceFromFlatten",
				"DistanceFromFlatten derive(CharacteristicType = toString(iif(isNull(CharacteristicType) == false(),'OppositeParallelLines'))) ~> DistanceFromType",
				"CharacteristicItemSelect foldDown(unroll(CharacteristicItems.EllipticityCharacteristicItem),",
				"     mapColumn(",
				"          QPID = QPId,",
				"          CharacteristicType = CharacteristicItems.EllipticityCharacteristicItem,",
				"          id = CharacteristicItems.EllipticityCharacteristicItem.{@id},",
				"          Name = CharacteristicItems.EllipticityCharacteristicItem.Name,",
				"          CharacteristicNominalid = CharacteristicItems.EllipticityCharacteristicItem.CharacteristicNominalId",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> EllipticityFlatten",
				"EllipticityFlatten derive(CharacteristicType = toString(iif(isNull(CharacteristicType) == false(),'Ellipticity'))) ~> EllipticityType",
				"CharacteristicItemSelect foldDown(unroll(CharacteristicItems.FlatTaperCharacteristicItem),",
				"     mapColumn(",
				"          QPID = QPId,",
				"          CharacteristicType = CharacteristicItems.FlatTaperCharacteristicItem,",
				"          id = CharacteristicItems.FlatTaperCharacteristicItem.{@id},",
				"          Name = CharacteristicItems.FlatTaperCharacteristicItem.Name,",
				"          CharacteristicNominalid = CharacteristicItems.FlatTaperCharacteristicItem.CharacteristicNominalId",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> FlatTaperFlatten",
				"FlatTaperFlatten derive(CharacteristicType = toString(iif(isNull(CharacteristicType) == false(),'FlatTaper'))) ~> FlatTaperType",
				"CharacteristicItemSelect foldDown(unroll(CharacteristicItems.FlatnessCharacteristicItem),",
				"     mapColumn(",
				"          QPID = QPId,",
				"          CharacteristicType = CharacteristicItems.FlatnessCharacteristicItem,",
				"          id = CharacteristicItems.FlatnessCharacteristicItem.{@id},",
				"          Name = CharacteristicItems.FlatnessCharacteristicItem.Name,",
				"          CharacteristicNominalid = CharacteristicItems.FlatnessCharacteristicItem.CharacteristicNominalId",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> FlatnessFlatten",
				"FlatnessFlatten derive(CharacteristicType = toString(iif(isNull(CharacteristicType) == false(),'Flatness'))) ~> FlatnessType",
				"CharacteristicItemSelect foldDown(unroll(CharacteristicItems.HeightCharacteristicItem),",
				"     mapColumn(",
				"          QPID = QPId,",
				"          CharacteristicType = CharacteristicItems.HeightCharacteristicItem,",
				"          id = CharacteristicItems.HeightCharacteristicItem.{@id},",
				"          Name = CharacteristicItems.HeightCharacteristicItem.Name,",
				"          CharacteristicNominalid = CharacteristicItems.HeightCharacteristicItem.CharacteristicNominalId",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> HeightFlatten",
				"HeightFlatten derive(CharacteristicType = toString(iif(isNull(CharacteristicType) == false(),'Height'))) ~> HeightType",
				"CharacteristicItemSelect foldDown(unroll(CharacteristicItems.LengthCharacteristicItem),",
				"     mapColumn(",
				"          QPID = QPId,",
				"          CharacteristicType = CharacteristicItems.LengthCharacteristicItem,",
				"          id = CharacteristicItems.LengthCharacteristicItem.{@id},",
				"          Name = CharacteristicItems.LengthCharacteristicItem.Name,",
				"          CharacteristicNominalid = CharacteristicItems.LengthCharacteristicItem.CharacteristicNominalId",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> LengthFlatten",
				"LengthFlatten derive(CharacteristicType = toString(iif(isNull(CharacteristicType) == false(),'Length'))) ~> LengthType",
				"CharacteristicItemSelect foldDown(unroll(CharacteristicItems.LinearCoordinateCharacteristicItem),",
				"     mapColumn(",
				"          QPID = QPId,",
				"          CharacteristicType = CharacteristicItems.LinearCoordinateCharacteristicItem,",
				"          id = CharacteristicItems.LinearCoordinateCharacteristicItem.{@id},",
				"          Name = CharacteristicItems.LinearCoordinateCharacteristicItem.Name,",
				"          CharacteristicNominalid = CharacteristicItems.LinearCoordinateCharacteristicItem.CharacteristicNominalId",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> LinearCoordinateFlatten",
				"LinearCoordinateFlatten derive(CharacteristicType = toString(iif(isNull(CharacteristicType) == false(),'LinearCoordinate'))) ~> LinearCoordinateType",
				"CharacteristicItemSelect foldDown(unroll(CharacteristicItems.LineProfileCharacteristicItem),",
				"     mapColumn(",
				"          QPID = QPId,",
				"          CharacteristicType = CharacteristicItems.LineProfileCharacteristicItem,",
				"          id = CharacteristicItems.LineProfileCharacteristicItem.{@id},",
				"          Name = CharacteristicItems.LineProfileCharacteristicItem.Name,",
				"          CharacteristicNominalid = CharacteristicItems.LineProfileCharacteristicItem.CharacteristicNominalId",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> LineProfileFlatten",
				"LineProfileFlatten derive(CharacteristicType = toString(iif(isNull(CharacteristicType) == false(),'LineProfile'))) ~> LineProfileType",
				"CharacteristicItemSelect foldDown(unroll(CharacteristicItems.OtherFormCharacteristicItem),",
				"     mapColumn(",
				"          QPID = QPId,",
				"          CharacteristicType = CharacteristicItems.OtherFormCharacteristicItem,",
				"          id = CharacteristicItems.OtherFormCharacteristicItem.{@id},",
				"          Name = CharacteristicItems.OtherFormCharacteristicItem.Name,",
				"          CharacteristicNominalid = CharacteristicItems.OtherFormCharacteristicItem.CharacteristicNominalId",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> OtherFormFlatten",
				"OtherFormFlatten derive(CharacteristicType = toString(iif(isNull(CharacteristicType) == false(),'OtherForm'))) ~> OtherFormType",
				"CharacteristicItemSelect foldDown(unroll(CharacteristicItems.ParallelismCharacteristicItem),",
				"     mapColumn(",
				"          QPID = QPId,",
				"          CharacteristicType = CharacteristicItems.ParallelismCharacteristicItem,",
				"          id = CharacteristicItems.ParallelismCharacteristicItem.{@id},",
				"          Name = CharacteristicItems.ParallelismCharacteristicItem.Name,",
				"          CharacteristicNominalid = CharacteristicItems.ParallelismCharacteristicItem.CharacteristicNominalId",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> ParallelismFlatten",
				"ParallelismFlatten derive(CharacteristicType = toString(iif(isNull(CharacteristicType) == false(),'Parallelism'))) ~> ParallelismType",
				"CharacteristicItemSelect foldDown(unroll(CharacteristicItems.PerpendicularityCharacteristicItem),",
				"     mapColumn(",
				"          QPID = QPId,",
				"          CharacteristicType = CharacteristicItems.PerpendicularityCharacteristicItem,",
				"          id = CharacteristicItems.PerpendicularityCharacteristicItem.{@id},",
				"          Name = CharacteristicItems.PerpendicularityCharacteristicItem.Name,",
				"          CharacteristicNominalid = CharacteristicItems.PerpendicularityCharacteristicItem.CharacteristicNominalId",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> PerpendicularityFlatten",
				"PerpendicularityFlatten derive(CharacteristicType = toString(iif(isNull(CharacteristicType) == false(),'Perpendicularity'))) ~> PerpendicularityType",
				"CharacteristicItemSelect foldDown(unroll(CharacteristicItems.PointProfileCharacteristicItem),",
				"     mapColumn(",
				"          QPID = QPId,",
				"          CharacteristicType = CharacteristicItems.PointProfileCharacteristicItem,",
				"          id = CharacteristicItems.PointProfileCharacteristicItem.{@id},",
				"          Name = CharacteristicItems.PointProfileCharacteristicItem.Name,",
				"          CharacteristicNominalid = CharacteristicItems.PointProfileCharacteristicItem.CharacteristicNominalId",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> PointProfileFlatten",
				"PointProfileFlatten derive(CharacteristicType = toString(iif(isNull(CharacteristicType) == false(),'PointProfile'))) ~> PointProfileType",
				"CharacteristicItemSelect foldDown(unroll(CharacteristicItems.PositionCharacteristicItem),",
				"     mapColumn(",
				"          QPID = QPId,",
				"          CharacteristicType = CharacteristicItems.PositionCharacteristicItem,",
				"          id = CharacteristicItems.PositionCharacteristicItem.{@id},",
				"          Name = CharacteristicItems.PositionCharacteristicItem.Name,",
				"          CharacteristicNominalid = CharacteristicItems.PositionCharacteristicItem.CharacteristicNominalId",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> PositionFlatten",
				"PositionFlatten derive(CharacteristicType = toString(iif(isNull(CharacteristicType) == false(),'Position'))) ~> PositionType",
				"CharacteristicItemSelect foldDown(unroll(CharacteristicItems.RadiusCharacteristicItem),",
				"     mapColumn(",
				"          QPID = QPId,",
				"          CharacteristicType = CharacteristicItems.RadiusCharacteristicItem,",
				"          id = CharacteristicItems.RadiusCharacteristicItem.{@id},",
				"          Name = CharacteristicItems.RadiusCharacteristicItem.Name,",
				"          CharacteristicNominalid = CharacteristicItems.RadiusCharacteristicItem.CharacteristicNominalId",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> RadiusFlatten",
				"RadiusFlatten derive(CharacteristicType = toString(iif(isNull(CharacteristicType) == false(),'Radius'))) ~> RadiusType",
				"CharacteristicItemSelect foldDown(unroll(CharacteristicItems.SphericalDiameterCharacteristicItem),",
				"     mapColumn(",
				"          QPID = QPId,",
				"          CharacteristicType = CharacteristicItems.SphericalDiameterCharacteristicItem,",
				"          id = CharacteristicItems.SphericalDiameterCharacteristicItem.{@id},",
				"          Name = CharacteristicItems.SphericalDiameterCharacteristicItem.Name,",
				"          CharacteristicNominalid = CharacteristicItems.SphericalDiameterCharacteristicItem.CharacteristicNominalId",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> SphericalDiameterFlatten",
				"SphericalDiameterFlatten derive(CharacteristicType = toString(iif(isNull(CharacteristicType) == false(),'SphericalDiameter'))) ~> SphericalDiameterType",
				"CharacteristicItemSelect foldDown(unroll(CharacteristicItems.SphericalRadiusCharacteristicItem),",
				"     mapColumn(",
				"          QPID = QPId,",
				"          CharacteristicType = CharacteristicItems.SphericalRadiusCharacteristicItem,",
				"          id = CharacteristicItems.SphericalRadiusCharacteristicItem.{@id},",
				"          Name = CharacteristicItems.SphericalRadiusCharacteristicItem.Name,",
				"          CharacteristicNominalid = CharacteristicItems.SphericalRadiusCharacteristicItem.CharacteristicNominalId",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> SphericalRadiusFlatten",
				"SphericalRadiusFlatten derive(CharacteristicType = toString(iif(isNull(CharacteristicType) == false(),'SphericalRadius'))) ~> SphericalRadiusType",
				"CharacteristicItemSelect foldDown(unroll(CharacteristicItems.SphericityCharacteristicItem),",
				"     mapColumn(",
				"          QPID = QPId,",
				"          CharacteristicType = CharacteristicItems.SphericityCharacteristicItem,",
				"          id = CharacteristicItems.SphericityCharacteristicItem.{@id},",
				"          Name = CharacteristicItems.SphericityCharacteristicItem.Name,",
				"          CharacteristicNominalid = CharacteristicItems.SphericityCharacteristicItem.CharacteristicNominalId",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> SphericityFlatten",
				"SphericityFlatten derive(CharacteristicType = toString(iif(isNull(CharacteristicType) == false(),'Sphericity'))) ~> SphericityType",
				"CharacteristicItemSelect foldDown(unroll(CharacteristicItems.SquareCharacteristicItem),",
				"     mapColumn(",
				"          QPID = QPId,",
				"          CharacteristicType = CharacteristicItems.SquareCharacteristicItem,",
				"          id = CharacteristicItems.SquareCharacteristicItem.{@id},",
				"          Name = CharacteristicItems.SquareCharacteristicItem.Name,",
				"          CharacteristicNominalid = CharacteristicItems.SquareCharacteristicItem.CharacteristicNominalId",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> SquareFlatten",
				"SquareFlatten derive(CharacteristicType = toString(iif(isNull(CharacteristicType) == false(),'Square'))) ~> SquareType",
				"CharacteristicItemSelect foldDown(unroll(CharacteristicItems.StraightnessCharacteristicItem),",
				"     mapColumn(",
				"          QPID = QPId,",
				"          CharacteristicType = CharacteristicItems.StraightnessCharacteristicItem,",
				"          id = CharacteristicItems.StraightnessCharacteristicItem.{@id},",
				"          Name = CharacteristicItems.StraightnessCharacteristicItem.Name,",
				"          CharacteristicNominalid = CharacteristicItems.StraightnessCharacteristicItem.CharacteristicNominalId",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> StraightnessFlatten",
				"StraightnessFlatten derive(CharacteristicType = toString(iif(isNull(CharacteristicType) == false(),'Straightness'))) ~> StraightnessType",
				"CharacteristicItemSelect foldDown(unroll(CharacteristicItems.SurfaceProfileCharacteristicItem),",
				"     mapColumn(",
				"          QPID = QPId,",
				"          CharacteristicType = CharacteristicItems.SurfaceProfileCharacteristicItem,",
				"          id = CharacteristicItems.SurfaceProfileCharacteristicItem.{@id},",
				"          Name = CharacteristicItems.SurfaceProfileCharacteristicItem.Name,",
				"          CharacteristicNominalid = CharacteristicItems.SurfaceProfileCharacteristicItem.CharacteristicNominalId",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> SurfaceProfileFlatten",
				"SurfaceProfileFlatten derive(CharacteristicType = toString(iif(isNull(CharacteristicType) == false(),'SurfaceProfile'))) ~> SurfaceProfileType",
				"CharacteristicItemSelect foldDown(unroll(CharacteristicItems.SurfaceProfileNonUniformCharacteristicItem),",
				"     mapColumn(",
				"          QPID = QPId,",
				"          CharacteristicType = CharacteristicItems.SurfaceProfileNonUniformCharacteristicItem,",
				"          id = CharacteristicItems.SurfaceProfileNonUniformCharacteristicItem.{@id},",
				"          Name = CharacteristicItems.SurfaceProfileNonUniformCharacteristicItem.Name,",
				"          CharacteristicNominalid = CharacteristicItems.SurfaceProfileNonUniformCharacteristicItem.CharacteristicNominalId",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> SurfaceProfileNonUniformFlatten",
				"SurfaceProfileNonUniformFlatten derive(CharacteristicType = toString(iif(isNull(CharacteristicType) == false(),'SurfaceProfileNonUniform'))) ~> SurfaceProfileNonUniformType",
				"CharacteristicItemSelect foldDown(unroll(CharacteristicItems.SurfaceTextureCharacteristicItem),",
				"     mapColumn(",
				"          QPID = QPId,",
				"          CharacteristicType = CharacteristicItems.SurfaceTextureCharacteristicItem,",
				"          id = CharacteristicItems.SurfaceTextureCharacteristicItem.{@id},",
				"          Name = CharacteristicItems.SurfaceTextureCharacteristicItem.Name,",
				"          CharacteristicNominalid = CharacteristicItems.SurfaceTextureCharacteristicItem.CharacteristicNominalId",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> SurfaceTextureFlatten",
				"SurfaceTextureFlatten derive(CharacteristicType = toString(iif(isNull(CharacteristicType) == false(),'SurfaceTexture'))) ~> SurfaceTextureType",
				"CharacteristicItemSelect foldDown(unroll(CharacteristicItems.SymmetryCharacteristicItem),",
				"     mapColumn(",
				"          QPID = QPId,",
				"          CharacteristicType = CharacteristicItems.SymmetryCharacteristicItem,",
				"          id = CharacteristicItems.SymmetryCharacteristicItem.{@id},",
				"          Name = CharacteristicItems.SymmetryCharacteristicItem.Name,",
				"          CharacteristicNominalid = CharacteristicItems.SymmetryCharacteristicItem.CharacteristicNominalId",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> SymmetryFlatten",
				"SymmetryFlatten derive(CharacteristicType = toString(iif(isNull(CharacteristicType) == false(),'Symmetry'))) ~> SymmetryType",
				"CharacteristicItemSelect foldDown(unroll(CharacteristicItems.ThicknessCharacteristicItem),",
				"     mapColumn(",
				"          QPID = QPId,",
				"          CharacteristicType = CharacteristicItems.ThicknessCharacteristicItem,",
				"          id = CharacteristicItems.ThicknessCharacteristicItem.{@id},",
				"          Name = CharacteristicItems.ThicknessCharacteristicItem.Name,",
				"          CharacteristicNominalid = CharacteristicItems.ThicknessCharacteristicItem.CharacteristicNominalId",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> ThicknessFlatten",
				"ThicknessFlatten derive(CharacteristicType = toString(iif(isNull(CharacteristicType) == false(),'Thickness'))) ~> ThicknessType",
				"CharacteristicItemSelect foldDown(unroll(CharacteristicItems.ThreadCharacteristicItem),",
				"     mapColumn(",
				"          QPID = QPId,",
				"          CharacteristicType = CharacteristicItems.ThreadCharacteristicItem,",
				"          id = CharacteristicItems.ThreadCharacteristicItem.{@id},",
				"          Name = CharacteristicItems.ThreadCharacteristicItem.Name,",
				"          CharacteristicNominalid = CharacteristicItems.ThreadCharacteristicItem.CharacteristicNominalId",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> ThreadFlatten",
				"ThreadFlatten derive(CharacteristicType = toString(iif(isNull(CharacteristicType) == false(),'Thread'))) ~> ThreadType",
				"CharacteristicItemSelect foldDown(unroll(CharacteristicItems.ToroidicityCharacteristicItem),",
				"     mapColumn(",
				"          QPID = QPId,",
				"          CharacteristicType = CharacteristicItems.ToroidicityCharacteristicItem,",
				"          id = CharacteristicItems.ToroidicityCharacteristicItem.{@id},",
				"          Name = CharacteristicItems.ToroidicityCharacteristicItem.Name,",
				"          CharacteristicNominalid = CharacteristicItems.ToroidicityCharacteristicItem.CharacteristicNominalId",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> ToroidicityFlatten",
				"ToroidicityFlatten derive(CharacteristicType = toString(iif(isNull(CharacteristicType) == false(),'Toroidicity'))) ~> ToroidicityType",
				"CharacteristicItemSelect foldDown(unroll(CharacteristicItems.TotalRunoutCharacteristicItem),",
				"     mapColumn(",
				"          QPID = QPId,",
				"          CharacteristicType = CharacteristicItems.TotalRunoutCharacteristicItem,",
				"          id = CharacteristicItems.TotalRunoutCharacteristicItem.{@id},",
				"          Name = CharacteristicItems.TotalRunoutCharacteristicItem.Name,",
				"          CharacteristicNominalid = CharacteristicItems.TotalRunoutCharacteristicItem.CharacteristicNominalId",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> TotalRunoutFlatten",
				"TotalRunoutFlatten derive(CharacteristicType = toString(iif(isNull(CharacteristicType) == false(),'TotalRunout'))) ~> TotalRunoutType",
				"CharacteristicItemSelect foldDown(unroll(CharacteristicItems.UserDefinedAttributeCharacteristicItem),",
				"     mapColumn(",
				"          QPID = QPId,",
				"          CharacteristicType = CharacteristicItems.UserDefinedAttributeCharacteristicItem,",
				"          id = CharacteristicItems.UserDefinedAttributeCharacteristicItem.{@id},",
				"          Name = CharacteristicItems.UserDefinedAttributeCharacteristicItem.Name,",
				"          CharacteristicNominalid = CharacteristicItems.UserDefinedAttributeCharacteristicItem.CharacteristicNominalId",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> UserDefinedAttributeFlatten",
				"UserDefinedAttributeFlatten derive(CharacteristicType = toString(iif(isNull(CharacteristicType) == false(),'UserDefinedAttribute'))) ~> UserDefinedAttributeType",
				"CharacteristicItemSelect foldDown(unroll(CharacteristicItems.UserDefinedLinearCharacteristicItem),",
				"     mapColumn(",
				"          QPID = QPId,",
				"          CharacteristicType = CharacteristicItems.UserDefinedLinearCharacteristicItem,",
				"          id = CharacteristicItems.UserDefinedLinearCharacteristicItem.{@id},",
				"          Name = CharacteristicItems.UserDefinedLinearCharacteristicItem.Name,",
				"          CharacteristicNominalid = CharacteristicItems.UserDefinedLinearCharacteristicItem.CharacteristicNominalId",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> UserDefinedLinearFlatten",
				"UserDefinedLinearFlatten derive(CharacteristicType = toString(iif(isNull(CharacteristicType) == false(),'UserDefinedLinear'))) ~> UserDefinedLinearType",
				"CharacteristicItemSelect foldDown(unroll(CharacteristicItems.UserDefinedAngularCharacteristicItem),",
				"     mapColumn(",
				"          QPID = QPId,",
				"          CharacteristicType = CharacteristicItems.UserDefinedAngularCharacteristicItem,",
				"          id = CharacteristicItems.UserDefinedAngularCharacteristicItem.{@id},",
				"          Name = CharacteristicItems.UserDefinedAngularCharacteristicItem.Name,",
				"          CharacteristicNominalid = CharacteristicItems.UserDefinedAngularCharacteristicItem.CharacteristicNominalId",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> UserDefinedAngularFlatten",
				"UserDefinedAngularFlatten derive(CharacteristicType = toString(iif(isNull(CharacteristicType) == false(),'UserDefinedAngular'))) ~> UserDefinedAngularType",
				"CharacteristicItemSelect foldDown(unroll(CharacteristicItems.UserDefinedTemperatureCharacteristicItem),",
				"     mapColumn(",
				"          QPID = QPId,",
				"          CharacteristicType = CharacteristicItems.UserDefinedTemperatureCharacteristicItem,",
				"          id = CharacteristicItems.UserDefinedTemperatureCharacteristicItem.{@id},",
				"          Name = CharacteristicItems.UserDefinedTemperatureCharacteristicItem.Name,",
				"          CharacteristicNominalid = CharacteristicItems.UserDefinedTemperatureCharacteristicItem.CharacteristicNominalId",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> UserDefinedTemperatureFlatten",
				"UserDefinedTemperatureFlatten derive(CharacteristicType = toString(iif(isNull(CharacteristicType) == false(),'UserDefinedTemperature'))) ~> UserDefinedTemperatureType",
				"CharacteristicItemSelect foldDown(unroll(CharacteristicItems.UserDefinedAreaCharacteristicItem),",
				"     mapColumn(",
				"          QPID = QPId,",
				"          CharacteristicType = CharacteristicItems.UserDefinedAreaCharacteristicItem,",
				"          id = CharacteristicItems.UserDefinedAreaCharacteristicItem.{@id},",
				"          Name = CharacteristicItems.UserDefinedAreaCharacteristicItem.Name,",
				"          CharacteristicNominalid = CharacteristicItems.UserDefinedAreaCharacteristicItem.CharacteristicNominalId",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> UserDefinedAreaFlatten",
				"UserDefinedAreaFlatten derive(CharacteristicType = toString(iif(isNull(CharacteristicType) == false(),'UserDefinedArea'))) ~> UserDefinedAreaType",
				"CharacteristicItemSelect foldDown(unroll(CharacteristicItems.UserDefinedForceCharacteristicItem),",
				"     mapColumn(",
				"          QPID = QPId,",
				"          CharacteristicType = CharacteristicItems.UserDefinedForceCharacteristicItem,",
				"          id = CharacteristicItems.UserDefinedForceCharacteristicItem.{@id},",
				"          Name = CharacteristicItems.UserDefinedForceCharacteristicItem.Name,",
				"          CharacteristicNominalid = CharacteristicItems.UserDefinedForceCharacteristicItem.CharacteristicNominalId",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> UserDefinedForceFlatten",
				"UserDefinedForceFlatten derive(CharacteristicType = toString(iif(isNull(CharacteristicType) == false(),'UserDefinedForce'))) ~> UserDefinedForceType",
				"CharacteristicItemSelect foldDown(unroll(CharacteristicItems.UserDefinedMassCharacteristicItem),",
				"     mapColumn(",
				"          QPID = QPId,",
				"          CharacteristicType = CharacteristicItems.UserDefinedMassCharacteristicItem,",
				"          id = CharacteristicItems.UserDefinedMassCharacteristicItem.{@id},",
				"          Name = CharacteristicItems.UserDefinedMassCharacteristicItem.Name,",
				"          CharacteristicNominalid = CharacteristicItems.UserDefinedMassCharacteristicItem.CharacteristicNominalId",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> UserDefinedMassFlatten",
				"UserDefinedMassFlatten derive(CharacteristicType = toString(iif(isNull(CharacteristicType) == false(),'UserDefinedMass'))) ~> UserDefinedMassType",
				"CharacteristicItemSelect foldDown(unroll(CharacteristicItems.UserDefinedPressureCharacteristicItem),",
				"     mapColumn(",
				"          QPID = QPId,",
				"          CharacteristicType = CharacteristicItems.UserDefinedPressureCharacteristicItem,",
				"          id = CharacteristicItems.UserDefinedPressureCharacteristicItem.{@id},",
				"          Name = CharacteristicItems.UserDefinedPressureCharacteristicItem.Name,",
				"          CharacteristicNominalid = CharacteristicItems.UserDefinedPressureCharacteristicItem.CharacteristicNominalId",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> UserDefinedPressureFlatten",
				"UserDefinedPressureFlatten derive(CharacteristicType = toString(iif(isNull(CharacteristicType) == false(),'UserDefinedPressure'))) ~> UserDefinedPressureType",
				"CharacteristicItemSelect foldDown(unroll(CharacteristicItems.UserDefinedSpeedCharacteristicItem),",
				"     mapColumn(",
				"          QPID = QPId,",
				"          CharacteristicType = CharacteristicItems.UserDefinedSpeedCharacteristicItem,",
				"          id = CharacteristicItems.UserDefinedSpeedCharacteristicItem.{@id},",
				"          Name = CharacteristicItems.UserDefinedSpeedCharacteristicItem.Name,",
				"          CharacteristicNominalid = CharacteristicItems.UserDefinedSpeedCharacteristicItem.CharacteristicNominalId",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> UserDefinedSpeedFlatten",
				"UserDefinedSpeedFlatten derive(CharacteristicType = toString(iif(isNull(CharacteristicType) == false(),'UserDefinedSpeed'))) ~> UserDefinedSpeedType",
				"CharacteristicItemSelect foldDown(unroll(CharacteristicItems.UserDefinedTimeCharacteristicItem),",
				"     mapColumn(",
				"          QPID = QPId,",
				"          CharacteristicType = CharacteristicItems.UserDefinedTimeCharacteristicItem,",
				"          id = CharacteristicItems.UserDefinedTimeCharacteristicItem.{@id},",
				"          Name = CharacteristicItems.UserDefinedTimeCharacteristicItem.Name,",
				"          CharacteristicNominalid = CharacteristicItems.UserDefinedTimeCharacteristicItem.CharacteristicNominalId",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> UserDefinedTimeFlatten",
				"UserDefinedTimeFlatten derive(CharacteristicType = toString(iif(isNull(CharacteristicType) == false(),'UserDefinedTime'))) ~> UserDefinedTimeType",
				"CharacteristicItemSelect foldDown(unroll(CharacteristicItems.UserDefinedUnitCharacteristicItem),",
				"     mapColumn(",
				"          QPID = QPId,",
				"          CharacteristicType = CharacteristicItems.UserDefinedUnitCharacteristicItem,",
				"          id = CharacteristicItems.UserDefinedUnitCharacteristicItem.{@id},",
				"          Name = CharacteristicItems.UserDefinedUnitCharacteristicItem.Name,",
				"          CharacteristicNominalid = CharacteristicItems.UserDefinedUnitCharacteristicItem.CharacteristicNominalId",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> UserDefinedUnitFlatten",
				"UserDefinedUnitFlatten derive(CharacteristicType = toString(iif(isNull(CharacteristicType) == false(),'UserDefinedUnit'))) ~> UserDefinedUnitType",
				"CharacteristicItemSelect foldDown(unroll(CharacteristicItems.WeldFilletCharacteristicItem),",
				"     mapColumn(",
				"          QPID = QPId,",
				"          CharacteristicType = CharacteristicItems.WeldFilletCharacteristicItem,",
				"          id = CharacteristicItems.WeldFilletCharacteristicItem.{@id},",
				"          Name = CharacteristicItems.WeldFilletCharacteristicItem.Name,",
				"          CharacteristicNominalid = CharacteristicItems.WeldFilletCharacteristicItem.CharacteristicNominalId",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> WeldFilletFlatten",
				"WeldFilletFlatten derive(CharacteristicType = toString(iif(isNull(CharacteristicType) == false(),'WeldFillet'))) ~> WeldFilletType",
				"CharacteristicItemSelect foldDown(unroll(CharacteristicItems.WeldPlugCharacteristicItem),",
				"     mapColumn(",
				"          QPID = QPId,",
				"          CharacteristicType = CharacteristicItems.WeldPlugCharacteristicItem,",
				"          id = CharacteristicItems.WeldPlugCharacteristicItem.{@id},",
				"          Name = CharacteristicItems.WeldPlugCharacteristicItem.Name,",
				"          CharacteristicNominalid = CharacteristicItems.WeldPlugCharacteristicItem.CharacteristicNominalId",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> WeldPlugFlatten",
				"WeldPlugFlatten derive(CharacteristicType = toString(iif(isNull(CharacteristicType) == false(),'WeldPlug'))) ~> WeldPlugType",
				"CharacteristicItemSelect foldDown(unroll(CharacteristicItems.WeldSlotCharacteristicItem),",
				"     mapColumn(",
				"          QPID = QPId,",
				"          CharacteristicType = CharacteristicItems.WeldSlotCharacteristicItem,",
				"          id = CharacteristicItems.WeldSlotCharacteristicItem.{@id},",
				"          Name = CharacteristicItems.WeldSlotCharacteristicItem.Name,",
				"          CharacteristicNominalid = CharacteristicItems.WeldSlotCharacteristicItem.CharacteristicNominalId",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> WeldSlotFlatten",
				"WeldSlotFlatten derive(CharacteristicType = toString(iif(isNull(CharacteristicType) == false(),'WeldSlot'))) ~> WeldSlotType",
				"CharacteristicItemSelect foldDown(unroll(CharacteristicItems.WeldSpotCharacteristicItem),",
				"     mapColumn(",
				"          QPID = QPId,",
				"          CharacteristicType = CharacteristicItems.WeldSpotCharacteristicItem,",
				"          id = CharacteristicItems.WeldSpotCharacteristicItem.{@id},",
				"          Name = CharacteristicItems.WeldSpotCharacteristicItem.Name,",
				"          CharacteristicNominalid = CharacteristicItems.WeldSpotCharacteristicItem.CharacteristicNominalId",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> WeldSpotFlatten",
				"WeldSpotFlatten derive(CharacteristicType = toString(iif(isNull(CharacteristicType) == false(),'WeldSpot'))) ~> WeldSpotType",
				"CharacteristicItemSelect foldDown(unroll(CharacteristicItems.WeldStudCharacteristicItem),",
				"     mapColumn(",
				"          QPID = QPId,",
				"          CharacteristicType = CharacteristicItems.WeldStudCharacteristicItem,",
				"          id = CharacteristicItems.WeldStudCharacteristicItem.{@id},",
				"          Name = CharacteristicItems.WeldStudCharacteristicItem.Name,",
				"          CharacteristicNominalid = CharacteristicItems.WeldStudCharacteristicItem.CharacteristicNominalId",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> WeldStudFlatten",
				"WeldStudFlatten derive(CharacteristicType = toString(iif(isNull(CharacteristicType) == false(),'WeldStud'))) ~> WeldStudType",
				"CharacteristicItemSelect foldDown(unroll(CharacteristicItems.WeldSeamCharacteristicItem),",
				"     mapColumn(",
				"          QPID = QPId,",
				"          CharacteristicType = CharacteristicItems.WeldSeamCharacteristicItem,",
				"          id = CharacteristicItems.WeldSeamCharacteristicItem.{@id},",
				"          Name = CharacteristicItems.WeldSeamCharacteristicItem.Name,",
				"          CharacteristicNominalid = CharacteristicItems.WeldSeamCharacteristicItem.CharacteristicNominalId",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> WeldSeamFlatten",
				"WeldSeamFlatten derive(CharacteristicType = toString(iif(isNull(CharacteristicType) == false(),'WeldSeam'))) ~> WeldSeamType",
				"CharacteristicItemSelect foldDown(unroll(CharacteristicItems.WeldSurfacingCharacteristicItem),",
				"     mapColumn(",
				"          QPID = QPId,",
				"          CharacteristicType = CharacteristicItems.WeldSurfacingCharacteristicItem,",
				"          id = CharacteristicItems.WeldSurfacingCharacteristicItem.{@id},",
				"          Name = CharacteristicItems.WeldSurfacingCharacteristicItem.Name,",
				"          CharacteristicNominalid = CharacteristicItems.WeldSurfacingCharacteristicItem.CharacteristicNominalId",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> WeldSurfacingFlatten",
				"WeldSurfacingFlatten derive(CharacteristicType = toString(iif(isNull(CharacteristicType) == false(),'WeldSurfacing'))) ~> WeldSurfacingType",
				"CharacteristicItemSelect foldDown(unroll(CharacteristicItems.WeldEdgeCharacteristicItem),",
				"     mapColumn(",
				"          QPID = QPId,",
				"          CharacteristicType = CharacteristicItems.WeldEdgeCharacteristicItem,",
				"          id = CharacteristicItems.WeldEdgeCharacteristicItem.{@id},",
				"          Name = CharacteristicItems.WeldEdgeCharacteristicItem.Name,",
				"          CharacteristicNominalid = CharacteristicItems.WeldEdgeCharacteristicItem.CharacteristicNominalId",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> WeldEdgeFlatten",
				"WeldEdgeFlatten derive(CharacteristicType = toString(iif(isNull(CharacteristicType) == false(),'WeldEdge'))) ~> WeldEdgeType",
				"CharacteristicItemSelect foldDown(unroll(CharacteristicItems.WeldSquareCharacteristicItem),",
				"     mapColumn(",
				"          QPID = QPId,",
				"          CharacteristicType = CharacteristicItems.WeldSquareCharacteristicItem,",
				"          id = CharacteristicItems.WeldSquareCharacteristicItem.{@id},",
				"          Name = CharacteristicItems.WeldSquareCharacteristicItem.Name,",
				"          CharacteristicNominalid = CharacteristicItems.WeldSquareCharacteristicItem.CharacteristicNominalId",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> WeldSquareFlatten",
				"WeldSquareFlatten derive(CharacteristicType = toString(iif(isNull(CharacteristicType) == false(),'WeldSquare'))) ~> WeldSquareType",
				"CharacteristicItemSelect foldDown(unroll(CharacteristicItems.WeldBevelCharacteristicItem),",
				"     mapColumn(",
				"          QPID = QPId,",
				"          CharacteristicType = CharacteristicItems.WeldBevelCharacteristicItem,",
				"          id = CharacteristicItems.WeldBevelCharacteristicItem.{@id},",
				"          Name = CharacteristicItems.WeldBevelCharacteristicItem.Name,",
				"          CharacteristicNominalid = CharacteristicItems.WeldBevelCharacteristicItem.CharacteristicNominalId",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> WeldBevelFlatten",
				"WeldBevelFlatten derive(CharacteristicType = toString(iif(isNull(CharacteristicType) == false(),'WeldBevel'))) ~> WeldBevelType",
				"CharacteristicItemSelect foldDown(unroll(CharacteristicItems.WeldVCharacteristicItem),",
				"     mapColumn(",
				"          QPID = QPId,",
				"          CharacteristicType = CharacteristicItems.WeldVCharacteristicItem,",
				"          id = CharacteristicItems.WeldVCharacteristicItem.{@id},",
				"          Name = CharacteristicItems.WeldVCharacteristicItem.Name,",
				"          CharacteristicNominalid = CharacteristicItems.WeldVCharacteristicItem.CharacteristicNominalId",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> WeldVFlatten",
				"WeldVFlatten derive(CharacteristicType = toString(iif(isNull(CharacteristicType) == false(),'WeldVs'))) ~> WeldVType",
				"CharacteristicItemSelect foldDown(unroll(CharacteristicItems.WeldUCharacteristicItem),",
				"     mapColumn(",
				"          QPID = QPId,",
				"          CharacteristicType = CharacteristicItems.WeldUCharacteristicItem,",
				"          id = CharacteristicItems.WeldUCharacteristicItem.{@id},",
				"          Name = CharacteristicItems.WeldUCharacteristicItem.Name,",
				"          CharacteristicNominalid = CharacteristicItems.WeldUCharacteristicItem.CharacteristicNominalId",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> WeldUFlatten",
				"WeldUFlatten derive(CharacteristicType = toString(iif(isNull(CharacteristicType) == false(),'WeldU'))) ~> WeldUType",
				"CharacteristicItemSelect foldDown(unroll(CharacteristicItems.WeldJCharacteristicItem),",
				"     mapColumn(",
				"          QPID = QPId,",
				"          CharacteristicType = CharacteristicItems.WeldJCharacteristicItem,",
				"          id = CharacteristicItems.WeldJCharacteristicItem.{@id},",
				"          Name = CharacteristicItems.WeldJCharacteristicItem.Name,",
				"          CharacteristicNominalid = CharacteristicItems.WeldJCharacteristicItem.CharacteristicNominalId",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> WeldJFlatten",
				"WeldJFlatten derive(CharacteristicType = toString(iif(isNull(CharacteristicType) == false(),'WeldJ'))) ~> WeldJType",
				"CharacteristicItemSelect foldDown(unroll(CharacteristicItems.WeldFlareVCharacteristicItem),",
				"     mapColumn(",
				"          QPID = QPId,",
				"          CharacteristicType = CharacteristicItems.WeldFlareVCharacteristicItem,",
				"          id = CharacteristicItems.WeldFlareVCharacteristicItem.{@id},",
				"          Name = CharacteristicItems.WeldFlareVCharacteristicItem.Name,",
				"          CharacteristicNominalid = CharacteristicItems.WeldFlareVCharacteristicItem.CharacteristicNominalId",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> WeldFlareVFlatten",
				"WeldFlareVFlatten derive(CharacteristicType = toString(iif(isNull(CharacteristicType) == false(),'WeldFlareV'))) ~> WeldFlareVType",
				"CharacteristicItemSelect foldDown(unroll(CharacteristicItems.WeldFlareBevelCharacteristicItem),",
				"     mapColumn(",
				"          QPID = QPId,",
				"          CharacteristicType = CharacteristicItems.WeldFlareBevelCharacteristicItem,",
				"          id = CharacteristicItems.WeldFlareBevelCharacteristicItem.{@id},",
				"          Name = CharacteristicItems.WeldFlareBevelCharacteristicItem.Name,",
				"          CharacteristicNominalid = CharacteristicItems.WeldFlareBevelCharacteristicItem.CharacteristicNominalId",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> WeldFlareBevelFlatten",
				"WeldFlareBevelFlatten derive(CharacteristicType = toString(iif(isNull(CharacteristicType) == false(),'WeldFlareBevel'))) ~> WeldFlareBevelType",
				"CharacteristicItemSelect foldDown(unroll(CharacteristicItems.WeldScarfCharacteristicItem),",
				"     mapColumn(",
				"          QPID = QPId,",
				"          CharacteristicType = CharacteristicItems.WeldScarfCharacteristicItem,",
				"          id = CharacteristicItems.WeldScarfCharacteristicItem.{@id},",
				"          Name = CharacteristicItems.WeldScarfCharacteristicItem.Name,",
				"          CharacteristicNominalid = CharacteristicItems.WeldScarfCharacteristicItem.CharacteristicNominalId",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> WeldScarfFlatten",
				"WeldScarfFlatten derive(CharacteristicType = toString(iif(isNull(CharacteristicType) == false(),'WeldScarf'))) ~> WeldScarfType",
				"CharacteristicItemSelect foldDown(unroll(CharacteristicItems.WeldCompoundCharacteristicItem),",
				"     mapColumn(",
				"          QPID = QPId,",
				"          CharacteristicType = CharacteristicItems.WeldCompoundCharacteristicItem,",
				"          id = CharacteristicItems.WeldCompoundCharacteristicItem.{@id},",
				"          Name = CharacteristicItems.WeldCompoundCharacteristicItem.Name,",
				"          CharacteristicNominalid = CharacteristicItems.WeldCompoundCharacteristicItem.CharacteristicNominalId",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> WeldCompoundFlatten",
				"WeldCompoundFlatten derive(CharacteristicType = toString(iif(isNull(CharacteristicType) == false(),'WeldCompound'))) ~> WeldCompoundType",
				"CharacteristicItemSelect foldDown(unroll(CharacteristicItems.WidthCharacteristicItem),",
				"     mapColumn(",
				"          QPID = QPId,",
				"          CharacteristicType = CharacteristicItems.WidthCharacteristicItem,",
				"          id = CharacteristicItems.WidthCharacteristicItem.{@id},",
				"          Name = CharacteristicItems.WidthCharacteristicItem.Name,",
				"          CharacteristicNominalid = CharacteristicItems.WidthCharacteristicItem.CharacteristicNominalId",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> WidthFlatten",
				"WidthFlatten derive(CharacteristicType = toString(iif(isNull(CharacteristicType) == false(),'Width'))) ~> WidthType",
				"AngleBetweenType, AngleType, AngularCoordinateType, AngleFromType, AngularityType, ChordType, CircularityType, CircularRunoutType, CoaxialityType, ConcentricityType, ConicalTaperType, ConicityType, CurveLengthType, CylindricityType, DepthType, DiameterType, DistanceBetweenType, DistanceFromType, EllipticityType, FlatTaperType, FlatnessType, HeightType, LengthType, LinearCoordinateType, LineProfileType, OtherFormType, ParallelismType, PerpendicularityType, PointProfileType, PositionType, RadiusType, SphericalDiameterType, SphericalRadiusType, SphericityType, SquareType, StraightnessType, SurfaceProfileType, SurfaceProfileNonUniformType, SurfaceTextureType, SymmetryType, ThicknessType, ThreadType, ToroidicityType, TotalRunoutType, UserDefinedAttributeType, UserDefinedLinearType, UserDefinedAngularType, UserDefinedTemperatureType, UserDefinedAreaType, UserDefinedForceType, UserDefinedMassType, UserDefinedPressureType, UserDefinedSpeedType, UserDefinedTimeType, UserDefinedUnitType, WidthType, WeldFilletType, WeldPlugType, WeldSlotType, WeldSpotType, WeldStudType, WeldSeamType, WeldSurfacingType, WeldEdgeType, WeldSquareType, WeldBevelType, WeldVType, WeldUType, WeldJType, WeldFlareVType, WeldFlareBevelType, WeldScarfType, WeldCompoundType union(byName: true)~> CharacteristicItemUnion",
				"CharacteristicItemUnion alterRow(deleteIf(isNull(CharacteristicType))) ~> RemoveNullRows",
				"MeasurementQIFIn select(mapColumn(",
				"          FileVersion = QIFDocument.Version.TimeCreated",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> VersionSelect",
				"VersionSelect derive(FileVersion = toTimestamp(FileVersion,'yyyy-MM-dd\\'T\\'HH:mm:ss')) ~> ToTimestamp",
				"QIFDocumentSource, CharacteristicItemSelect lookup(QIFDocumentSource@QPID == CharacteristicItemSelect@QPId,",
				"     multiple: true,",
				"     broadcast: 'auto')~> QPIDLookup",
				"QPIDLookup select(mapColumn(",
				"          IDMax",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> IDMaxSelect",
				"RemoveNullRows sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          CharacteristicType as string,",
				"          id as integer,",
				"          Name as string,",
				"          CharacteristicNominalid as integer,",
				"          QPID as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          CharacteristicType,",
				"          id,",
				"          Name,",
				"          CharacteristicNominalid,",
				"          QPID",
				"     )) ~> CharacteristicItemSink"
			]
		}
	}
}